Index: src/main/java/Controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller;\r\n\r\nimport Model.*;\r\nimport View.*;\r\nimport javafx.scene.image.Image;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\n\r\npublic class GameController {\r\n\r\n    public static Card selectedCard = null;\r\n    public static Card lastSelectedCard = null;\r\n    public static boolean isOpponentCardSelected = false;\r\n    public static boolean isAttackTrap = false;\r\n    public static boolean isSpellTrap = false;\r\n    public static boolean isSummonTrap = false;\r\n    public static boolean isCyberseActive = false;\r\n    public static boolean isTrapFrozen = false;\r\n    public static boolean isHeartActive = false;\r\n    public static boolean isThreeLightActive = false;\r\n    public static boolean is1500Active = false;\r\n    public static Player getLightPlayer = null;\r\n    public static int reserve = 0;\r\n\r\n\r\n    public static int selectCard(String cardPosition, int number, String opponent) {\r\n        Player player = Player.currentPlayer;\r\n        if (player.isInOpponentPhase() && isAttackTrap) return selectAttackTrap(cardPosition, number);\r\n        if (player.isInOpponentPhase() && isSummonTrap) return selectSummonTrap(cardPosition, number);\r\n        if (player.isInOpponentPhase() && isSpellTrap) return selectSpellTrap(cardPosition, number);\r\n        if (opponent != null && !opponent.equals(\"\")) player = Player.opponent;\r\n        if (selectedCard != null) deSelectCard();\r\n        if (cardPosition.equals(\"hand\") && player.getBoard().getCardFromHand(number) != null) {\r\n            player.getBoard().getCardFromHand(number).setSelected(true);\r\n            selectedCard = player.getBoard().getCardFromHand(number);\r\n            return 1;\r\n        } else if (cardPosition.equals(\"hand\")) return 0;\r\n        else if (cardPosition.equals(\"field\") && player.getBoard().getFieldZone().get(0) != null) {\r\n            player.getBoard().getFieldZone().get(0).setSelected(true);\r\n            selectedCard = player.getBoard().getFieldZone().get(0);\r\n            return 1;\r\n        } else if (cardPosition.equals(\"field\")) return 0;\r\n        number = switchNumberForCurrent(number);\r\n        if (cardPosition.equals(\"monster\") && player.getBoard().getCardFromMonsterField(number) != null) {\r\n            player.getBoard().getCardFromMonsterField(number).setSelected(true);\r\n            selectedCard = player.getBoard().getCardFromMonsterField(number);\r\n            return 1;\r\n        } else if (cardPosition.equals(\"monster\")) return 0;\r\n        else if (cardPosition.equals(\"spell\") && player.getBoard().getCardFromSpellField(number) != null) {\r\n            player.getBoard().getCardFromSpellField(number).setSelected(true);\r\n            selectedCard = player.getBoard().getCardFromSpellField(number);\r\n            return 1;\r\n        } else if (cardPosition.equals(\"spell\")) return 0;\r\n\r\n        return -1;\r\n    }\r\n\r\n    public static int switchNumberForCurrent(int number) {\r\n        if (number == 1) return 2;\r\n        if (number == 2) return 3;\r\n        if (number == 3) return 1;\r\n        if (number == 4) return 4;\r\n        return 0;\r\n    }\r\n\r\n\r\n    private static int selectAttackTrap(String cardPosition, int number) {\r\n        number = switchNumberForCurrent(number);\r\n        if (Player.currentPlayer.getBoard().getCardFromSpellField(number) == null) return 0;\r\n        String cardName = Player.currentPlayer.getBoard().getCardFromSpellField(number).getCardName();\r\n        if (cardPosition.equals(\"spell\") && (cardName.equals(\"Magic Cylinder\") || cardName.equals(\"Mirror Force\")) ||\r\n                cardName.equals(\"Negate Attack\")) {\r\n            Player.currentPlayer.getBoard().getCardFromSpellField(number).setSelected(true);\r\n            selectedCard = Player.currentPlayer.getBoard().getCardFromSpellField(number);\r\n            return 1;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public static int selectSpellTrap(String cardPosition, int number) {\r\n        number = switchNumberForCurrent(number);\r\n        if (Player.currentPlayer.getBoard().getCardFromSpellField(number) == null) return 0;\r\n        String cardName = Player.currentPlayer.getBoard().getCardFromSpellField(number).getCardName();\r\n        if (cardPosition.equals(\"spell\") && cardName.equals(\"Magic Jammer\")) {\r\n            Player.currentPlayer.getBoard().getCardFromSpellField(number).setSelected(true);\r\n            selectedCard = Player.currentPlayer.getBoard().getCardFromSpellField(number);\r\n            return 1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private static int selectSummonTrap(String cardPosition, int number) {\r\n        number = switchNumberForCurrent(number);\r\n        if (Player.currentPlayer.getBoard().getCardFromSpellField(number) == null) return 0;\r\n        String cardName = Player.currentPlayer.getBoard().getCardFromSpellField(number).getCardName();\r\n        if (cardPosition.equals(\"spell\") && (cardName.equals(\"Trap Hole\") || cardName.equals(\"Torrential Tribute\")) ||\r\n                cardName.equals(\"Solemn Warning\")) {\r\n            Player.currentPlayer.getBoard().getCardFromSpellField(number).setSelected(true);\r\n            selectedCard = Player.currentPlayer.getBoard().getCardFromSpellField(number);\r\n            return 1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public static void activeSpellsByName() {\r\n        EffectController.spellAbsorption();\r\n    }\r\n\r\n    public static void activeSpell() {\r\n        if (isSpellTrap()) return;\r\n        activeSpellsByName();\r\n        for (Effect effect : selectedCard.getEffects()) {\r\n            effect.enableEffect(null);\r\n        }\r\n    }\r\n\r\n    public static void deActiveSpell()\r\n    {\r\n        for (Effect effect : Card.getCardByName(\"Change of Heart\").getEffects()) {\r\n            effect.disableEffect(null);\r\n        }\r\n\r\n    }\r\n    public static void activeThreeLight() {\r\n        for (Effect effect : Card.getCardByName(\"Swords of Revealing Light\").getEffects()) {\r\n            effect.enableEffect(null);\r\n        }\r\n    }\r\n\r\n    public static void selectCardFromGraveyard(int index) {\r\n        Player.currentPlayer.getBoard().getGraveyard().get(index).setSelected(true);\r\n        selectedCard = Player.currentPlayer.getBoard().getGraveyard().get(index);\r\n    }\r\n\r\n\r\n    public static void setIsOpponentCardSelected(boolean isOpponentCardSelected) {\r\n        GameController.isOpponentCardSelected = isOpponentCardSelected;\r\n    }\r\n\r\n    public static void deSelectCard() {\r\n        setIsOpponentCardSelected(false);\r\n        selectedCard.setSelected(false);\r\n        selectedCard = null;\r\n    }\r\n\r\n    public static Deck createDeck(String deckName) {\r\n\r\n        if (ProgramController.isDeckExist(deckName))\r\n            return null;\r\n        else {\r\n            Deck deck = new Deck(deckName);\r\n            Player.thePlayer.addToDeckList(deck);\r\n            Player.deActiveDecks();\r\n            deck.setDeckActive(true);\r\n            return deck;\r\n        }\r\n    }\r\n\r\n    public static void deleteDeck(String deckName) {\r\n        Player.thePlayer.deleteDeck(deckName);\r\n    }\r\n\r\n    public static void activateDeck(String deckName) {\r\n        Player.deActiveDecks();\r\n        Player.getDeckByName(deckName).setDeckActive(true);\r\n    }\r\n\r\n    public static void addCardToDeck(String deckName, String cardName, boolean isSide) throws CloneNotSupportedException {\r\n        if (!isSide) {\r\n            Player.getDeckByName(deckName).addToMainDeck((Card) Card.getCardByName(cardName).clone());\r\n        } else {\r\n            Player.getDeckByName(deckName).addToSideDeck((Card) Card.getCardByName(cardName).clone());\r\n        }\r\n//        Player.thePlayer.removeFromCardList(cardName);\r\n    }\r\n\r\n    public static void removeCardFromDeck(String deckName, String cardName, boolean isSide) {\r\n        if (!isSide) {\r\n            Player.getDeckByName(deckName).removeFromMainDeck(cardName);\r\n        } else {\r\n            Player.getDeckByName(deckName).removeFromSideDeck(cardName);\r\n        }\r\n//        Player.thePlayer.addToCardList(Card.getCardByName(cardName));\r\n    }\r\n\r\n\r\n    public static boolean isDeckActive(String user) {\r\n        return Player.getUserByUsername(user).getActiveDeck() != null;\r\n    }\r\n\r\n    public static boolean isDeckValid(String user) {\r\n        return Player.getUserByUsername(user).getActiveDeck().getMainDeck().size() >= 0;\r\n    }\r\n\r\n    public static void initiateGame(String firstPlayer, String secondPlayer, int round) {\r\n        RoundController.otherPlayer = Player.getUserByUsername(secondPlayer);\r\n        RoundController.setRound(round);\r\n    }\r\n\r\n    public static void setNextGame(String firstPlayer, String secondPlayer) {\r\n        if(Player.currentPlayer.equals(Player.theAi) || Player.opponent.equals(Player.theAi)){\r\n            Ai.setNextGame();\r\n        }\r\n        ChangeCardsMenu changeCardsMenu = new ChangeCardsMenu();\r\n        changeCardsMenu.changeDeck(firstPlayer);\r\n        changeCardsMenu.changeDeck(secondPlayer);\r\n        prepareGame();\r\n    }\r\n\r\n    public static void prepareGame() {\r\n        //RoundController.setWhoPlayFirst(firstPlayer, secondPlayer);\r\n        Board board1 = new Board(Player.currentPlayer);\r\n        Player.currentPlayer.setBoard(board1);\r\n        Board board2 = new Board(Player.opponent);\r\n        Player.opponent.setBoard(board2);\r\n        Player.currentPlayer.resetLifePoint();\r\n        Player.opponent.resetLifePoint();\r\n        shuffleDeck(Player.currentPlayer);\r\n        shuffleDeck(Player.opponent);\r\n        for (int i = 0; i < 5; i++) {\r\n            drawCard(Player.currentPlayer);\r\n            drawCard(Player.opponent);\r\n        }\r\n        RoundController.drawPhase();\r\n\r\n    }\r\n\r\n\r\n    public static Card drawCard(Player player) {\r\n        if (player.getBoard().getHand().size() < 6) {\r\n            Card card = player.getBoard().getDeck().get(0);\r\n            card.setCardStatus(CardStatus.HAND);\r\n            player.getBoard().getHand().add(player.getBoard().getDeck().get(0));\r\n            player.getBoard().getDeck().remove(card);\r\n            return card;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static void shuffleDeck(Player player) {\r\n        //Collections.shuffle(player.getBoard().getDeck());\r\n    }\r\n\r\n    public static void showBoard() {\r\n        System.out.println(Player.opponent.getNickname() + \":\" + Player.opponent.getLifePoint());\r\n        System.out.print(\"\\t\");\r\n        for (int i = 0; i < Player.opponent.getBoard().getHand().size(); i++) {\r\n            System.out.print(\"c\\t\");\r\n        }\r\n        System.out.println();\r\n        System.out.println(Player.opponent.board.deck.size());\r\n        System.out.print(\"\\t\");\r\n        for (int i = 4; i >= 0; i--) {\r\n            Card card = Player.opponent.getBoard().getFieldCardsForSpellTraps().get(i);\r\n            if (card == null) {\r\n                System.out.print(\"E\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.BACK) {\r\n                System.out.print(\"H\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.SET) {\r\n                System.out.print(\"O\\t\");\r\n            }\r\n        }\r\n        System.out.println();\r\n        System.out.print(\"\\t\");\r\n        for (int i = 4; i >= 0; i--) {\r\n            Card card = Player.opponent.getBoard().getFieldCardsForMonsters().get(i);\r\n            if (card == null) {\r\n                System.out.print(\"E\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.DEFENCE) {\r\n                System.out.print(\"DO\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.SET) {\r\n                System.out.print(\"DH\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.ATTACK) {\r\n                System.out.print(\"OO\\t\");\r\n            }\r\n        }\r\n        System.out.println();\r\n        System.out.print(Player.opponent.board.graveyard.size());\r\n        Util.printNCharacter(6, \"\\t\");\r\n        if (Player.opponent.getBoard().getFieldZone().get(0) == null) System.out.println(\"E\");\r\n        else System.out.println(\"O\");\r\n        System.out.println();\r\n        Util.printNCharacter(26, \"-\");\r\n        Util.printNCharacter(2, \"\\n\");\r\n\r\n        //-----------------------------\r\n\r\n        if (Player.currentPlayer.getBoard().getFieldZone().get(0) == null) System.out.print(\"E\");\r\n        else System.out.print(\"O\");\r\n        Util.printNCharacter(6, \"\\t\");\r\n        System.out.println(Player.currentPlayer.board.graveyard.size());\r\n        System.out.print(\"\\t\");\r\n        for (Card card : Player.currentPlayer.board.fieldCardsForMonsters) {\r\n            if (card == null) {\r\n                System.out.print(\"E\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.DEFENCE) {\r\n                System.out.print(\"DO\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.SET) {\r\n                System.out.print(\"DH\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.ATTACK) {\r\n                System.out.print(\"OO\\t\");\r\n            }\r\n        }\r\n        System.out.println();\r\n        System.out.print(\"\\t\");\r\n        for (Card card : Player.currentPlayer.board.fieldCardsForSpellTraps) {\r\n            if (card == null) {\r\n                System.out.print(\"E\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.BACK) {\r\n                System.out.print(\"H\\t\");\r\n            } else if (card.getCardStatus() == CardStatus.SET) {\r\n                System.out.print(\"O\\t\");\r\n            }\r\n        }\r\n        System.out.println();\r\n        Util.printNCharacter(6, \"\\t\");\r\n        System.out.println(Player.currentPlayer.board.deck.size());\r\n        for (int i = 0; i < Player.currentPlayer.board.hand.size(); i++) {\r\n            System.out.print(\"c\\t\");\r\n        }\r\n        System.out.println();\r\n        System.out.println(Player.currentPlayer.getNickname() + \":\" + Player.currentPlayer.getLifePoint());\r\n    }\r\n\r\n    public static void printGraveyardCards() {\r\n        for (int i = 0; i < Player.currentPlayer.getBoard().getGraveyard().size(); i++) {\r\n            System.out.println(Player.currentPlayer.getBoard().getGraveyard().get(i).getCardName() + \": \" +\r\n                    Player.currentPlayer.getBoard().getGraveyard().get(i).getDescription());\r\n        }\r\n    }\r\n\r\n    public static boolean isMonsterFieldFull() {\r\n        int check = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null) check++;\r\n        }\r\n        return check == 5;\r\n    }\r\n\r\n    public static boolean isSpellTrapFieldFull() {\r\n        int check = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null) check++;\r\n        }\r\n        return check == 5;\r\n    }\r\n\r\n    public static int summonMonster(int firstTribute, int secondTribute) {\r\n        if (isSummonTrap()) return -1;\r\n        if (firstTribute != -1 && secondTribute == -1) {\r\n            Card tributeCard = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(firstTribute);\r\n            Player.currentPlayer.getBoard().getGraveyard().add(tributeCard);\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(firstTribute, null);\r\n        } else if (secondTribute != -1) {\r\n            Card tributeCard1 = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(firstTribute);\r\n            Card tributeCard2 = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(secondTribute);\r\n            Player.currentPlayer.getBoard().getGraveyard().add(tributeCard1);\r\n            Player.currentPlayer.getBoard().getGraveyard().add(tributeCard2);\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(firstTribute, null);\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(secondTribute, null);\r\n        }\r\n        Player.currentPlayer.getBoard().getHand().remove(selectedCard);\r\n        selectedCard.setCardStatus(CardStatus.ATTACK);\r\n        putMonsterOnField();\r\n        callSummonEffects();\r\n        deSelectCard();\r\n        RoundController.isSummoned = true;\r\n        return 0;\r\n    }\r\n\r\n\r\n    public static void callSummonEffects() {\r\n        if (selectedCard.getCardTypes().contains(CardType.EFFECT)) {\r\n            for (Effect effect : selectedCard.getEffects()) {\r\n                effect.enableEffect(null);\r\n            }\r\n        }\r\n        checkCommandKnight();\r\n    }\r\n\r\n\r\n    private static void checkCommandKnight() {\r\n        Card card = Card.getCardByName(\"Command Knight\");\r\n        if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().contains(card)) {\r\n            for (Effect effect : card.getEffects()) {\r\n                effect.enableEffect(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void setMonster() {\r\n        Player.currentPlayer.getBoard().getHand().remove(selectedCard);\r\n        selectedCard.setCardStatus(CardStatus.SET);\r\n        selectedCard.setSummoned(true);\r\n        putMonsterOnField();\r\n        deSelectCard();\r\n        RoundController.isSummoned = true;\r\n    }\r\n\r\n    public static void setSpell() {\r\n        Player.currentPlayer.getBoard().getHand().remove(selectedCard);\r\n        selectedCard.setCardStatus(CardStatus.BACK);\r\n        selectedCard.setSummoned(true);\r\n        if (selectedCard.getCardTypes().contains(CardType.FIELD) &&\r\n                Player.currentPlayer.getBoard().getFieldZone().get(0) == null) {\r\n            Player.currentPlayer.getBoard().getFieldZone().set(0, selectedCard);\r\n        } else if (selectedCard.getCardTypes().contains(CardType.FIELD)) {\r\n            Player.currentPlayer.getBoard().getGraveyard().add(Player.currentPlayer.getBoard().getFieldZone().get(0));\r\n            Player.currentPlayer.getBoard().getFieldZone().set(0, selectedCard);\r\n        } else putSpellTrapOnField();\r\n        deSelectCard();\r\n    }\r\n\r\n    public static void putSpellTrapOnField() {\r\n        if (Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(2) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().set(2, selectedCard);\r\n        else if (Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(3) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().set(3, selectedCard);\r\n        else if (Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(1) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().set(1, selectedCard);\r\n        else if (Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(4) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().set(4, selectedCard);\r\n        else\r\n            Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().set(0, selectedCard);\r\n\r\n    }\r\n\r\n    public static void putMonsterOnField() {\r\n        if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(2) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(2, selectedCard);\r\n        else if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(3) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(3, selectedCard);\r\n        else if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(1) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(1, selectedCard);\r\n        else if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(4) == null)\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(4, selectedCard);\r\n        else\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(0, selectedCard);\r\n    }\r\n\r\n    public static void changeCardPosition(String cardStatus) {\r\n        if (cardStatus.equals(\"attack\")) selectedCard.setCardStatus(CardStatus.ATTACK);\r\n        else selectedCard.setCardStatus(CardStatus.DEFENCE);\r\n        selectedCard.setChanged(true);\r\n        deSelectCard();\r\n    }\r\n\r\n    public static void flipSummon() {\r\n        selectedCard.setSummoned(true);\r\n        if (isSummonTrap()) return;\r\n        selectedCard.setCardStatus(CardStatus.ATTACK);\r\n        callSummonEffects();\r\n        deSelectCard();\r\n    }\r\n\r\n    public static void specialSummon() {\r\n        GameMenu gameMenu = new GameMenu();\r\n        if (selectedCard.getCardName().equals(\"Gate Guardian\")) {\r\n            summonGateGuardian();\r\n        } else if (selectedCard.getCardName().equals(\"Beast King Barbaros\")) {\r\n            activeSpell();\r\n            summonBarbaros();\r\n        }\r\n    }\r\n\r\n    private static void summonBarbaros() {\r\n        if (getMonsterFieldSize() < 3) {\r\n            System.out.println(\"there are not enough cards for tribute\");\r\n            return;\r\n        }\r\n        String input = Communicate.input(\"Pick Monster for tribute\");\r\n        if (input.equals(\"cancel\")) {\r\n            System.out.println(\"Tribute Canceled\");\r\n            return;\r\n        }\r\n        int tribute = Integer.parseInt(input);\r\n        tribute = GameController.switchNumberForCurrent(tribute);\r\n        input = Communicate.input(\"Pick another Monster for tribute\");\r\n        if (input.equals(\"cancel\")) {\r\n            System.out.println(\"Tribute Canceled\");\r\n            return;\r\n        }\r\n        int tribute1 = Integer.parseInt(input);\r\n        tribute1 = GameController.switchNumberForCurrent(tribute1);\r\n\r\n        input = Communicate.input(\"Pick another Monster for tribute\");\r\n        if (input.equals(\"cancel\")) {\r\n            System.out.println(\"Tribute Canceled\");\r\n            return;\r\n        }\r\n        int tribute2 = Integer.parseInt(input);\r\n        tribute2 = GameController.switchNumberForCurrent(tribute2);\r\n        if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute) == null ||\r\n                Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute1) == null ||\r\n                Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute2) == null) {\r\n            System.out.println(\"there is no monster on one of these addresses\");\r\n            return;\r\n        }\r\n        Card tributeCard1 = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute);\r\n        Card tributeCard2 = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute1);\r\n        Card tributeCard3 = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute2);\r\n        Player.currentPlayer.getBoard().getGraveyard().add(tributeCard1);\r\n        Player.currentPlayer.getBoard().getGraveyard().add(tributeCard2);\r\n        Player.currentPlayer.getBoard().getGraveyard().add(tributeCard3);\r\n        Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(tribute, null);\r\n        Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(tribute1, null);\r\n        Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(tribute2, null);\r\n        summonMonster(0, 0);\r\n    }\r\n\r\n    private static void summonGateGuardian() {\r\n        if (getMonsterFieldSize() < 2) {\r\n            System.out.println(\"there are not enough cards for tribute\");\r\n            return;\r\n        }\r\n        int check = 0;\r\n        ArrayList<Integer> tributeIndex = new ArrayList<>();\r\n        for (int i = 0; i < 3; i++) {\r\n            String input = Communicate.input(\"Pick Monster for tribute\");\r\n            if (input.equals(\"cancel\")) {\r\n                System.out.println(\"Tribute Canceled\");\r\n                return;\r\n            }\r\n            int tribute = Integer.parseInt(input);\r\n            tribute = GameController.switchNumberForCurrent(tribute);\r\n            tributeIndex.add(tribute);\r\n        }\r\n        for (int i = 0; i < 3; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tributeIndex.get(i)) == null) {\r\n                System.out.println(\"there is no monster on one of these addresses\");\r\n                return;\r\n            }\r\n        }\r\n        for (int i = 0; i < 3; i++) {\r\n            Player.currentPlayer.getBoard().getGraveyard().add(Player.currentPlayer.getBoard().\r\n                    getFieldCardsForMonsters().get(tributeIndex.get(i)));\r\n            Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(tributeIndex.get(i), null);\r\n        }\r\n        selectedCard.setCardStatus(CardStatus.ATTACK);\r\n        putMonsterOnField();\r\n        System.out.println(\"special summoned successfully\");\r\n    }\r\n\r\n\r\n    public static void setAllCardsUnchanged() {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null)\r\n                Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).setChanged(false);\r\n        }\r\n    }\r\n\r\n    public static void setAllCardsUnAttacked() {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null)\r\n                Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).setAttacked(false);\r\n        }\r\n    }\r\n\r\n    public static void setAllCardUnSummoned() {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null)\r\n                Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).setSummoned(false);\r\n        }\r\n    }\r\n\r\n    public static void attackMonster(int enemyMonsterIndex) {\r\n        selectedCard.setAttacked(true);\r\n        GameMenu gameMenu = new GameMenu();\r\n        Card enemyCard = Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex);\r\n        if (isAttackTrap()) return;\r\n        if (enemyCard.getCardStatus().equals(CardStatus.ATTACK)) {\r\n\r\n            if (checkEffects(enemyCard)) return;\r\n            if (isMonsterChain(enemyCard, enemyMonsterIndex)) return;\r\n            if (enemyCard.getAttack() < selectedCard.getAttack()) {\r\n                putMonsterOnGraveYard(enemyCard, Player.opponent);\r\n                int damage = selectedCard.getAttack() - enemyCard.getAttack();\r\n                Player.opponent.increaseLifePoint(-1 * damage);\r\n                gameMenu.printMonsterAttacks(1, damage, enemyMonsterIndex);\r\n            } else if (enemyCard.getAttack() == selectedCard.getAttack()) {\r\n                putMonsterOnGraveYard(enemyCard, Player.opponent);\r\n                putMonsterOnGraveYard(selectedCard, Player.currentPlayer);\r\n                gameMenu.printMonsterAttacks(2, 0, enemyMonsterIndex);\r\n            } else {\r\n                putMonsterOnGraveYard(selectedCard, Player.currentPlayer);\r\n                int damage = enemyCard.getAttack() - selectedCard.getAttack();\r\n                Player.currentPlayer.increaseLifePoint(-1 * damage);\r\n                gameMenu.printMonsterAttacks(3, damage, enemyMonsterIndex);\r\n            }\r\n        } else {\r\n            if (checkEffects(enemyCard)) return;\r\n            if (isMonsterChain(enemyCard, enemyMonsterIndex)) return;\r\n            if (enemyCard.getDefence() < selectedCard.getAttack()) {\r\n                if (enemyCard.getCardStatus().equals(CardStatus.DEFENCE))\r\n                    gameMenu.printMonsterAttacks(4, 0, enemyMonsterIndex);\r\n                else gameMenu.printMonsterAttacks(7, 0, enemyMonsterIndex);\r\n                putMonsterOnGraveYard(enemyCard, Player.opponent);\r\n            } else if (enemyCard.getDefence() == selectedCard.getAttack()) {\r\n                if (enemyCard.getCardStatus().equals(CardStatus.DEFENCE))\r\n                    gameMenu.printMonsterAttacks(5, 0, enemyMonsterIndex);\r\n                else gameMenu.printMonsterAttacks(8, 0, enemyMonsterIndex);\r\n            } else if (enemyCard.getDefence() > selectedCard.getAttack()) {\r\n                int damage = enemyCard.getDefence() - selectedCard.getAttack();\r\n                Player.currentPlayer.increaseLifePoint(-1 * damage);\r\n                if (enemyCard.getCardStatus().equals(CardStatus.DEFENCE))\r\n                    gameMenu.printMonsterAttacks(6, damage, enemyMonsterIndex);\r\n                else gameMenu.printMonsterAttacks(9, damage, enemyMonsterIndex);\r\n            }\r\n        }\r\n        deSelectCard();\r\n    }\r\n\r\n    public static int attackDirect() {\r\n        if (isAttackTrap()) return -1;\r\n        selectedCard.setAttacked(true);\r\n        Player.opponent.increaseLifePoint(-1 * selectedCard.getAttack());\r\n        return selectedCard.getAttack();\r\n    }\r\n\r\n    public static boolean canDestroyMonster(Card enemyCard) {\r\n        if (enemyCard.getCardStatus().equals(CardStatus.ATTACK)) {\r\n            if (enemyCard.getAttack() < selectedCard.getAttack()) {\r\n                return true;\r\n            } else if (enemyCard.getAttack() == selectedCard.getAttack()) {\r\n                return true;\r\n            } else if (enemyCard.getAttack() > selectedCard.getAttack()) {\r\n                return false;\r\n            } else return false;\r\n        } else {\r\n            if (enemyCard.getDefence() < selectedCard.getAttack()) {\r\n                return true;\r\n            } else if (enemyCard.getDefence() == selectedCard.getAttack()) {\r\n                return false;\r\n            } else if (enemyCard.getDefence() > selectedCard.getAttack()) {\r\n                return false;\r\n            } else return false;\r\n        }\r\n    }\r\n\r\n    public static boolean isMonsterChain(Card enemyCard, int enemyMonsterIndex) {\r\n        GameMenu gameMenu = new GameMenu();\r\n        if (enemyCard.getCardName().equals(\"Yomi Ship\") &&\r\n                (enemyCard.getAttack() < selectedCard.getAttack() ||\r\n                        enemyCard.getDefence() < selectedCard.getAttack())) {\r\n            putMonsterOnGraveYard(enemyCard, Player.opponent);\r\n            putMonsterOnGraveYard(selectedCard, Player.currentPlayer);\r\n            gameMenu.printMonsterAttacks(2, 0, enemyMonsterIndex);\r\n            return true;\r\n        }\r\n        if (enemyCard.getCardName().equals(\"Suijin\")) {\r\n            RoundController.changeTurn();\r\n            showBoard();\r\n            String input = Communicate.input(\"do you want to use card effect? (yes/no)\");\r\n            if (input.equals(\"yes\")) {\r\n                int reservedAttack = selectedCard.getAttack();\r\n                selectedCard.setAttack(0);\r\n                putMonsterOnGraveYard(selectedCard, Player.currentPlayer);\r\n                int damage = enemyCard.getAttack() - selectedCard.getAttack();\r\n                Player.currentPlayer.increaseLifePoint(-1 * damage);\r\n                gameMenu.printMonsterAttacks(3, damage, enemyMonsterIndex);\r\n                selectedCard.setAttack(reservedAttack);\r\n                RoundController.changeTurn();\r\n                return true;\r\n            } else {\r\n                RoundController.changeTurn();\r\n                return false;\r\n            }\r\n        }\r\n        if (enemyCard.getCardName().equals(\"Marshmallon\")) {\r\n            if (enemyCard.getCardStatus().equals(CardStatus.SET)) {\r\n                Player.currentPlayer.setLifePoint(Player.currentPlayer.getLifePoint() - 1000);\r\n            }\r\n            return true;\r\n        }\r\n        if (enemyCard.getCardName().equals(\"Texchanger\") && isCyberseActive) {\r\n            isCyberseActive = false;\r\n            RoundController.changeTurn();\r\n            showBoard();\r\n            String input = Communicate.input(\"do you want to use card effect? (yes/no)\");\r\n            if (input.equals(\"yes\")) {\r\n                lastSelectedCard = selectedCard;\r\n                selectedCard = enemyCard;\r\n                activeSpell();\r\n                selectedCard = lastSelectedCard;\r\n            }\r\n            RoundController.changeTurn();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean checkEffects(Card enemyCard) {\r\n        if (EffectController.messengerOfPeace()) return true;\r\n        switch (enemyCard.getCardName()) {\r\n            case \"Command Knight\":\r\n                for (Card fieldCardsForMonster : Player.opponent.getBoard().getFieldCardsForMonsters()) {\r\n                    if (fieldCardsForMonster != null &&\r\n                            !fieldCardsForMonster.getCardName().equals(\"Command Knight\")) {\r\n                        CardMenu.printCardMassage(\"Command Knight\");\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            case \"Exploder Dragon\":\r\n                if ((enemyCard.getCardStatus().equals(CardStatus.ATTACK) && selectedCard.getAttack() > enemyCard.getAttack()) ||\r\n                        (enemyCard.getCardStatus().equals(CardStatus.DEFENCE) && selectedCard.getAttack() > enemyCard.getDefence()) ||\r\n                        (enemyCard.getCardStatus().equals(CardStatus.SET) && selectedCard.getAttack() > enemyCard.getDefence())) {\r\n                    Player.currentPlayer.getBoard().getGraveyard().add(selectedCard);\r\n                    int index = Player.currentPlayer.getBoard().getFieldCardsForMonsters().indexOf(selectedCard);\r\n                    Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(index, null);\r\n                    Player.opponent.getBoard().getGraveyard().add(enemyCard);\r\n                    index = Player.opponent.getBoard().getFieldCardsForMonsters().indexOf(enemyCard);\r\n                    Player.opponent.getBoard().getFieldCardsForMonsters().set(index, null);\r\n                    return true;\r\n                }\r\n                return false;\r\n\r\n        }\r\n\r\n        if (selectedCard.getCardName().equals(\"Exploder Dragon\")) {\r\n            if ((enemyCard.getCardStatus().equals(CardStatus.ATTACK) && selectedCard.getAttack() < enemyCard.getAttack()) ||\r\n                    (enemyCard.getCardStatus().equals(CardStatus.DEFENCE) && selectedCard.getAttack() < enemyCard.getDefence()) ||\r\n                    (enemyCard.getCardStatus().equals(CardStatus.SET) && selectedCard.getAttack() < enemyCard.getDefence())) {\r\n                Player.currentPlayer.getBoard().getGraveyard().add(selectedCard);\r\n                int index = Player.currentPlayer.getBoard().getFieldCardsForMonsters().indexOf(selectedCard);\r\n                Player.currentPlayer.getBoard().getFieldCardsForMonsters().set(index, null);\r\n                Player.opponent.getBoard().getGraveyard().add(enemyCard);\r\n                index = Player.opponent.getBoard().getFieldCardsForMonsters().indexOf(enemyCard);\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().set(index, null);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    public static boolean isAttackTrap() {\r\n        if (!isTrapFrozen) {\r\n            ArrayList<Card> trapList = Player.opponent.getBoard().getFieldCardsForSpellTraps();\r\n            if (trapList.contains(Card.getCardByName(\"Magic Cylinder\")) ||\r\n                    trapList.contains(Card.getCardByName(\"Mirror Force\")) ||\r\n                    trapList.contains(Card.getCardByName(\"Negate Attack\"))) {\r\n                lastSelectedCard = selectedCard;\r\n                isAttackTrap = true;\r\n                return isChangedTurnInMiddle();\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean isSpellTrap() {\r\n        if (!isTrapFrozen) {\r\n            ArrayList<Card> trapList = Player.opponent.getBoard().getFieldCardsForSpellTraps();\r\n            if (trapList.contains(Card.getCardByName(\"Magic Jammer\"))) {\r\n                lastSelectedCard = selectedCard;\r\n                isSpellTrap = true;\r\n                return isChangedTurnInMiddle();\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean isSummonTrap() {\r\n        if (!isTrapFrozen) {\r\n            ArrayList<Card> trapList = Player.opponent.getBoard().getFieldCardsForSpellTraps();\r\n            lastSelectedCard = selectedCard;\r\n            if (selectedCard.getAttack() >= 1000 && trapList.contains(Card.getCardByName(\"Trap Hole\"))) {\r\n                isSummonTrap = true;\r\n\r\n                return isChangedTurnInMiddle();\r\n            } else if (trapList.contains(Card.getCardByName(\"Torrential Tribute\"))) {\r\n                isSummonTrap = true;\r\n\r\n                return isChangedTurnInMiddle();\r\n            } else if (trapList.contains(Card.getCardByName(\"Solemn Warning\"))) {\r\n                isSummonTrap = true;\r\n\r\n                return isChangedTurnInMiddle();\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static void callTrapEffect(Card card) {\r\n        for (Effect effect : card.getEffects()) {\r\n            effect.enableEffect(null);\r\n        }\r\n    }\r\n\r\n    public static void putMonsterOnGraveYard(Card card, Player player) {\r\n        player.getBoard().getGraveyard().add(card);\r\n        int index = player.getBoard().getFieldCardsForMonsters().indexOf(card);\r\n        player.getBoard().getFieldCardsForMonsters().set(index, null);\r\n    }\r\n\r\n    public static boolean isEnemyMonsterFieldEmpty() {\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.opponent.getBoard().getFieldCardsForMonsters().get(i) != null) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static void checkOpponentSpellTraps() {\r\n        ArrayList<Card> cardList = Player.opponent.getBoard().getFieldCardsForSpellTraps();\r\n        boolean isChecked = false;\r\n        if (cardList.get(0) != null) {\r\n            for (int i = 0; i < 5; i++) {\r\n                //other things could happen in this if too\r\n                if (cardList.get(i).getCardTypes().equals(CardType.QUICKPLAY)) {\r\n                    isChecked = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (isChecked) isChangedTurnInMiddle();\r\n    }\r\n\r\n    private static boolean isChangedTurnInMiddle() {\r\n        GameMenu gameMenu = new GameMenu();\r\n        gameMenu.printMiddleChange();\r\n        RoundController.changeTurn();\r\n        showBoard();\r\n        if (Player.currentPlayer.equals(Player.theAi)) return true;\r\n        if (gameMenu.changePhaseInMiddle().equals(\"no\")) {\r\n            gameMenu.printMiddleChange();\r\n            RoundController.changeTurn();\r\n            showBoard();\r\n            return false;\r\n        } else {\r\n            Player.currentPlayer.setInOpponentPhase(true);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public static void getBackFromMiddleChange() {\r\n        GameMenu gameMenu = new GameMenu();\r\n        Player.currentPlayer.setInOpponentPhase(false);\r\n        gameMenu.printMiddleChange();\r\n        RoundController.changeTurn();\r\n        showBoard();\r\n    }\r\n\r\n    public static void setWinner(int lifePoint, Player winner, Player looser) {\r\n        int score;\r\n        if (lifePoint != -1) {\r\n            score = RoundController.rounds * 1000;\r\n            winner.increaseScore(score);\r\n            winner.increaseMoney(score + lifePoint * RoundController.rounds);\r\n        } else {\r\n            score = RoundController.rounds * 1000;\r\n            winner.increaseMoney(score);\r\n        }\r\n        looser.increaseMoney(RoundController.rounds * 100);\r\n        GameMenu gameMenu = new GameMenu();\r\n        gameMenu.informEndOfGame(winner, score);\r\n        MainMenu.menu = \"main\";\r\n    }\r\n\r\n    public static int getMonsterFieldSize() {\r\n        int numberOfMonsters = 0;\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null)\r\n                numberOfMonsters++;\r\n        }\r\n        return numberOfMonsters;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Controller/GameController.java b/src/main/java/Controller/GameController.java
--- a/src/main/java/Controller/GameController.java	(revision 622950d6f9a1eca892d789143bdcc57b6b3ede2c)
+++ b/src/main/java/Controller/GameController.java	(date 1625415401097)
@@ -232,7 +232,8 @@
     public static Card drawCard(Player player) {
         if (player.getBoard().getHand().size() < 6) {
             Card card = player.getBoard().getDeck().get(0);
-            card.setCardStatus(CardStatus.HAND);
+            if(card != null) card.setCardStatus(CardStatus.HAND);
+            else player.setLifePoint(0);
             player.getBoard().getHand().add(player.getBoard().getDeck().get(0));
             player.getBoard().getDeck().remove(card);
             return card;
Index: src/main/resources/View/gameMenu.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.*?>\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"720.0\" prefWidth=\"1280.0\" xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"View.GameMenu\">\r\n    <children>\r\n        <ImageView fitHeight=\"720.0\" fitWidth=\"961.0\" layoutX=\"406.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/fie_normal.png\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fx:id=\"cardShow\" fitHeight=\"287.0\" fitWidth=\"179.0\" layoutX=\"51.0\" layoutY=\"100.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/Cards/Monsters/Unknown.jpg\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fitHeight=\"348.0\" fitWidth=\"266.0\" layoutX=\"9.0\" layoutY=\"57.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/Border.png\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fitHeight=\"110.0\" fitWidth=\"91.0\" layoutX=\"36.0\" layoutY=\"575.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/Chara001.dds6.png\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fitHeight=\"110.0\" fitWidth=\"91.0\" layoutX=\"276.0\" layoutY=\"575.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/Chara001.dds6.png\" />\r\n            </image>\r\n        </ImageView>\r\n        <GridPane layoutX=\"567.0\" layoutY=\"115.0\" prefHeight=\"232.0\" prefWidth=\"585.0\">\r\n            <columnConstraints>\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            </columnConstraints>\r\n            <rowConstraints>\r\n                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n            </rowConstraints>\r\n            <children>\r\n                <ImageView fx:id=\"enemyMonster1\" fitHeight=\"110.0\" fitWidth=\"76.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.rowIndex=\"1\">\r\n                    <GridPane.margin>\r\n                        <Insets />\r\n                    </GridPane.margin>\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemySpell2\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"15.0\" layoutY=\"129.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemySpell1\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"15.0\" layoutY=\"129.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyMonster2\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"127.0\" layoutY=\"13.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemySpell3\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"127.0\" layoutY=\"13.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"2\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyMonster3\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"244.0\" layoutY=\"13.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemySpell4\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"244.0\" layoutY=\"129.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"3\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyMonster4\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"361.0\" layoutY=\"13.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemySpell5\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"361.0\" layoutY=\"129.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"4\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyMonster5\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"361.0\" layoutY=\"129.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n            </children>\r\n        </GridPane>\r\n        <GridPane fx:id=\"currentBoard\" layoutX=\"564.0\" layoutY=\"367.0\" prefHeight=\"244.0\" prefWidth=\"593.0\">\r\n            <columnConstraints>\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            </columnConstraints>\r\n            <rowConstraints>\r\n                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n            </rowConstraints>\r\n            <children>\r\n                <ImageView fx:id=\"spell1\" fitHeight=\"110.0\" fitWidth=\"76.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.rowIndex=\"1\">\r\n\r\n                    <GridPane.margin>\r\n                        <Insets />\r\n                    </GridPane.margin>\r\n                </ImageView>\r\n                <ImageView fx:id=\"monster2\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"15.0\" layoutY=\"138.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"monster1\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"129.0\" layoutY=\"16.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"spell3\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"16.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"2\" GridPane.rowIndex=\"1\">\r\n\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"monster3\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"129.0\" layoutY=\"138.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"2\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"spell2\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"129.0\" layoutY=\"138.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"monster4\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"129.0\" layoutY=\"138.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"3\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"monster5\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"16.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"4\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"spell4\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"16.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"3\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"spell5\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"16.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"4\" GridPane.rowIndex=\"1\">\r\n\r\n                </ImageView>\r\n            </children>\r\n        </GridPane>\r\n        <GridPane layoutX=\"439.0\" layoutY=\"632.0\" prefHeight=\"88.0\" prefWidth=\"718.0\">\r\n            <columnConstraints>\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            </columnConstraints>\r\n            <rowConstraints>\r\n                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n            </rowConstraints>\r\n            <children>\r\n                <ImageView fx:id=\"hand1\" fitHeight=\"110.0\" fitWidth=\"76.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"hand3\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"2\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"hand2\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"130.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"hand4\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"130.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"3\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"hand5\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"4\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"hand6\" fitHeight=\"110.0\" fitWidth=\"76.0\" layoutX=\"10.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"5\">\r\n\r\n                </ImageView>\r\n            </children>\r\n        </GridPane>\r\n        <GridPane layoutX=\"551.0\" layoutY=\"-1.0\" prefHeight=\"88.0\" prefWidth=\"726.0\">\r\n            <columnConstraints>\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n                <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            </columnConstraints>\r\n            <rowConstraints>\r\n                <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n            </rowConstraints>\r\n            <children>\r\n                <ImageView fx:id=\"enemyHand6\" fitHeight=\"118.0\" fitWidth=\"75.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyHand5\" fitHeight=\"118.0\" fitWidth=\"75.0\" layoutX=\"10.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"1\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyHand4\" fitHeight=\"118.0\" fitWidth=\"75.0\" layoutX=\"131.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"2\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyHand3\" fitHeight=\"118.0\" fitWidth=\"75.0\" layoutX=\"252.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"3\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyHand2\" fitHeight=\"118.0\" fitWidth=\"75.0\" layoutX=\"373.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"4\">\r\n\r\n                </ImageView>\r\n                <ImageView fx:id=\"enemyHand1\" fitHeight=\"118.0\" fitWidth=\"75.0\" layoutX=\"373.0\" layoutY=\"-1.0\" pickOnBounds=\"true\" preserveRatio=\"true\" GridPane.columnIndex=\"5\">\r\n\r\n                </ImageView>\r\n            </children>\r\n        </GridPane>\r\n        <ImageView fx:id=\"enemyDeck\" fitHeight=\"110.0\" fitWidth=\"75.0\" layoutX=\"450.0\" layoutY=\"87.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/Cards/Monsters/Unknown.jpg\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fx:id=\"enemyGraveyard\" fitHeight=\"110.0\" fitWidth=\"75.0\" layoutX=\"450.0\" layoutY=\"211.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n        </ImageView>\r\n        <ImageView fx:id=\"enemyField\" fitHeight=\"110.0\" fitWidth=\"75.0\" layoutX=\"1184.0\" layoutY=\"231.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n        </ImageView>\r\n        <ImageView fx:id=\"graveyard\" fitHeight=\"110.0\" fitWidth=\"75.0\" layoutX=\"1184.0\" layoutY=\"381.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n        </ImageView>\r\n        <ImageView fx:id=\"deck\" fitHeight=\"110.0\" fitWidth=\"75.0\" layoutX=\"1184.0\" layoutY=\"513.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../PNG/Cards/Monsters/Unknown.jpg\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fx:id=\"field\" fitHeight=\"110.0\" fitWidth=\"75.0\" layoutX=\"450.0\" layoutY=\"367.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n\r\n        </ImageView>\r\n        <Label fx:id=\"secondPlayerName\" layoutX=\"229.0\" layoutY=\"587.0\" text=\"Player\">\r\n            <font>\r\n                <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label fx:id=\"firstPlayerName\" layoutX=\"138.0\" layoutY=\"587.0\" text=\"Player\">\r\n            <font>\r\n                <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label fx:id=\"secondPlayerLP\" layoutX=\"229.0\" layoutY=\"641.0\" text=\"Player\">\r\n            <font>\r\n                <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label fx:id=\"firstPlayerLP\" layoutX=\"138.0\" layoutY=\"641.0\" text=\"Player\">\r\n            <font>\r\n                <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n            </font>\r\n        </Label>\r\n      <Label fx:id=\"turn\" layoutX=\"77.0\" layoutY=\"25.0\" prefHeight=\"35.0\" prefWidth=\"242.0\" textAlignment=\"CENTER\">\r\n         <font>\r\n            <Font name=\"Bell MT Italic\" size=\"25.0\" />\r\n         </font>\r\n      </Label>\r\n      <ImageView fitHeight=\"35.0\" fitWidth=\"35.0\" layoutX=\"265.0\" layoutY=\"115.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/ItemA0010.dds.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <ImageView fitHeight=\"35.0\" fitWidth=\"35.0\" layoutX=\"265.0\" layoutY=\"186.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/shield.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <Label fx:id=\"attack\" layoutX=\"322.0\" layoutY=\"124.0\" prefHeight=\"17.0\" prefWidth=\"43.0\" text=\"Player\">\r\n         <font>\r\n            <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label fx:id=\"defence\" layoutX=\"322.0\" layoutY=\"195.0\" prefHeight=\"17.0\" prefWidth=\"43.0\" text=\"Player\">\r\n         <font>\r\n            <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label fx:id=\"description\" layoutX=\"272.0\" layoutY=\"250.0\" prefHeight=\"118.0\" prefWidth=\"118.0\" text=\"Player\">\r\n         <font>\r\n            <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <ImageView fx:id=\"button1\" fitHeight=\"56.0\" fitWidth=\"106.0\" layoutX=\"24.0\" layoutY=\"416.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/Button.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <ImageView fx:id=\"button4\" fitHeight=\"53.0\" fitWidth=\"139.0\" layoutX=\"145.0\" layoutY=\"477.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/Button.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <ImageView fx:id=\"button2\" fitHeight=\"53.0\" fitWidth=\"139.0\" layoutX=\"145.0\" layoutY=\"416.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/Button.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <ImageView fx:id=\"button3\" fitHeight=\"56.0\" fitWidth=\"106.0\" layoutX=\"24.0\" layoutY=\"477.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/Button.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <Text fx:id=\"massage\" layoutX=\"268.0\" layoutY=\"435.0\" text=\"Player\" wrappingWidth=\"125.4189453125\">\r\n         <font>\r\n            <Font name=\"Bell MT Italic\" size=\"14.0\" />\r\n         </font>\r\n      </Text>\r\n      <ImageView fx:id=\"phase\" fitHeight=\"140.0\" fitWidth=\"837.0\" layoutX=\"181.0\" layoutY=\"272.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/draw.png\" />\r\n         </image>\r\n      </ImageView>\r\n    </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/View/gameMenu.fxml b/src/main/resources/View/gameMenu.fxml
--- a/src/main/resources/View/gameMenu.fxml	(revision 622950d6f9a1eca892d789143bdcc57b6b3ede2c)
+++ b/src/main/resources/View/gameMenu.fxml	(date 1625414753665)
@@ -33,53 +33,6 @@
                 <Image url="@../PNG/Chara001.dds6.png" />
             </image>
         </ImageView>
-        <GridPane layoutX="567.0" layoutY="115.0" prefHeight="232.0" prefWidth="585.0">
-            <columnConstraints>
-                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
-                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
-                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
-                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
-                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
-            </columnConstraints>
-            <rowConstraints>
-                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-            </rowConstraints>
-            <children>
-                <ImageView fx:id="enemyMonster1" fitHeight="110.0" fitWidth="76.0" pickOnBounds="true" preserveRatio="true" GridPane.rowIndex="1">
-                    <GridPane.margin>
-                        <Insets />
-                    </GridPane.margin>
-                </ImageView>
-                <ImageView fx:id="enemySpell2" fitHeight="110.0" fitWidth="76.0" layoutX="15.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="1">
-
-                </ImageView>
-                <ImageView fx:id="enemySpell1" fitHeight="110.0" fitWidth="76.0" layoutX="15.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true">
-
-                </ImageView>
-                <ImageView fx:id="enemyMonster2" fitHeight="110.0" fitWidth="76.0" layoutX="127.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="1" GridPane.rowIndex="1">
-
-                </ImageView>
-                <ImageView fx:id="enemySpell3" fitHeight="110.0" fitWidth="76.0" layoutX="127.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="2">
-
-                </ImageView>
-                <ImageView fx:id="enemyMonster3" fitHeight="110.0" fitWidth="76.0" layoutX="244.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="2" GridPane.rowIndex="1">
-
-                </ImageView>
-                <ImageView fx:id="enemySpell4" fitHeight="110.0" fitWidth="76.0" layoutX="244.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3">
-
-                </ImageView>
-                <ImageView fx:id="enemyMonster4" fitHeight="110.0" fitWidth="76.0" layoutX="361.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3" GridPane.rowIndex="1">
-
-                </ImageView>
-                <ImageView fx:id="enemySpell5" fitHeight="110.0" fitWidth="76.0" layoutX="361.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="4">
-
-                </ImageView>
-                <ImageView fx:id="enemyMonster5" fitHeight="110.0" fitWidth="76.0" layoutX="361.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="4" GridPane.rowIndex="1">
-
-                </ImageView>
-            </children>
-        </GridPane>
         <GridPane fx:id="currentBoard" layoutX="564.0" layoutY="367.0" prefHeight="244.0" prefWidth="593.0">
             <columnConstraints>
                 <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
@@ -242,6 +195,11 @@
             <Font name="Bell MT Italic" size="25.0" />
          </font>
       </Label>
+      <ImageView fx:id="phase" fitHeight="140.0" fitWidth="837.0" layoutX="181.0" layoutY="272.0" pickOnBounds="true" preserveRatio="true">
+         <image>
+            <Image url="@../PNG/draw.png" />
+         </image>
+      </ImageView>
       <ImageView fitHeight="35.0" fitWidth="35.0" layoutX="265.0" layoutY="115.0" pickOnBounds="true" preserveRatio="true">
          <image>
             <Image url="@../PNG/ItemA0010.dds.png" />
@@ -292,10 +250,52 @@
             <Font name="Bell MT Italic" size="14.0" />
          </font>
       </Text>
-      <ImageView fx:id="phase" fitHeight="140.0" fitWidth="837.0" layoutX="181.0" layoutY="272.0" pickOnBounds="true" preserveRatio="true">
-         <image>
-            <Image url="@../PNG/draw.png" />
-         </image>
-      </ImageView>
+        <GridPane layoutX="567.0" layoutY="115.0" prefHeight="232.0" prefWidth="585.0">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <children>
+                <ImageView fx:id="enemyMonster1" fitHeight="110.0" fitWidth="76.0" pickOnBounds="true" preserveRatio="true" GridPane.rowIndex="1">
+                    <GridPane.margin>
+                        <Insets />
+                    </GridPane.margin>
+                </ImageView>
+                <ImageView fx:id="enemySpell2" fitHeight="110.0" fitWidth="76.0" layoutX="15.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="1">
+
+                </ImageView>
+                <ImageView fx:id="enemySpell1" fitHeight="110.0" fitWidth="76.0" layoutX="15.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true">
+
+                </ImageView>
+                <ImageView fx:id="enemyMonster2" fitHeight="110.0" fitWidth="76.0" layoutX="127.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="1" GridPane.rowIndex="1">
+
+                </ImageView>
+                <ImageView fx:id="enemySpell3" fitHeight="110.0" fitWidth="76.0" layoutX="127.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="2">
+
+                </ImageView>
+                <ImageView fx:id="enemyMonster3" fitHeight="110.0" fitWidth="76.0" layoutX="244.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="2" GridPane.rowIndex="1">
+
+                </ImageView>
+                <ImageView fx:id="enemySpell4" fitHeight="110.0" fitWidth="76.0" layoutX="244.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3">
+
+                </ImageView>
+                <ImageView fx:id="enemyMonster4" fitHeight="110.0" fitWidth="76.0" layoutX="361.0" layoutY="13.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="3" GridPane.rowIndex="1">
+
+                </ImageView>
+                <ImageView fx:id="enemySpell5" fitHeight="110.0" fitWidth="76.0" layoutX="361.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="4">
+
+                </ImageView>
+                <ImageView fx:id="enemyMonster5" fitHeight="110.0" fitWidth="76.0" layoutX="361.0" layoutY="129.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="4" GridPane.rowIndex="1">
+
+                </ImageView>
+            </children>
+        </GridPane>
     </children>
 </AnchorPane>
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>GameMenu.java
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
--- a/.idea/.name	(revision 622950d6f9a1eca892d789143bdcc57b6b3ede2c)
+++ b/.idea/.name	(date 1625457349573)
@@ -1,1 +1,1 @@
-GameMenu.java
\ No newline at end of file
+Main.java
\ No newline at end of file
Index: src/main/java/View/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.*;\r\nimport Model.*;\r\nimport javafx.animation.FadeTransition;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameMenu {\r\n\r\n\r\n    public ImageView cardShow, hand1, hand2, hand3, hand4, hand5, hand6, enemyHand1, enemyHand2, enemyHand3, enemyHand4, enemyHand5, enemyHand6;\r\n    public ImageView monster1, monster2, monster3, monster4, monster5, spell1, spell2, spell3, spell4, spell5, enemySpell1, enemySpell2, enemySpell3;\r\n    public ImageView enemySpell4, enemySpell5, enemyMonster1, enemyMonster2, enemyMonster3, enemyMonster4, enemyMonster5, graveyard, enemyGraveyard;\r\n    public Label firstPlayerName, secondPlayerName, firstPlayerLP, secondPlayerLP, attack, defence, description, turn;\r\n    public ImageView button1, button2, button3, button4;\r\n    public Text massage;\r\n    public ImageView phase;\r\n    private ArrayList<ImageView> currentHand, enemyHand, currentMonster, enemyMonster, currentSpell, enemySpell;\r\n    boolean isHandSelected = false, isMonsterSelected = false, isSpellSelected = false, isOneTributeActive = false,\r\n            isTwoTributeActive = false;\r\n    AtomicInteger tribute = new AtomicInteger();\r\n\r\n\r\n    public void start() throws IOException {\r\n        Stage primaryStage = ProgramController.getStage();\r\n        Parent root = FXMLLoader.load(getClass().getResource(\"gameMenu.fxml\"));\r\n        primaryStage.setTitle(\"Yu-Gi-Oh\");\r\n        primaryStage.setScene(new Scene(root, 1280, 720));\r\n        primaryStage.show();\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        secondPlayerName.setText(RoundController.otherPlayer.getNickname());\r\n        firstPlayerName.setText(Player.thePlayer.getNickname());\r\n        makeSpellList();\r\n        currentHand = makeHandList();\r\n        enemyHand = makeEnemyHandList();\r\n        currentMonster = makeMonsterList();\r\n        button1.setOnMouseClicked(event -> callButton1());\r\n        button2.setOnMouseClicked(event -> callButton2());\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n        animatePhase();\r\n        goToNextPhase();\r\n        selectCard();\r\n    }\r\n\r\n    private void animatePhase() {\r\n        FadeTransition fade = new FadeTransition();\r\n        fade.setDuration(Duration.millis(1000));\r\n        fade.setFromValue(10);\r\n        fade.setToValue(0);\r\n        fade.setAutoReverse(true);\r\n        fade.setNode(phase);\r\n        fade.play();\r\n    }\r\n\r\n\r\n    private void goToNextPhase() {\r\n        if (Player.currentPlayer.getPhase().equals(Phase.DRAW)){\r\n            RoundController.mainPhase1();\r\n            animateNextPhase(\"main\");\r\n        }\r\n        button4.setOnMouseClicked(event -> {\r\n            if (!isOneTributeActive && !isTwoTributeActive) {\r\n                if(Player.currentPlayer.getPhase().equals(Phase.MAIN1)){\r\n                    RoundController.battlePhase();\r\n                    phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/battle.png\")));\r\n                    animatePhase();\r\n                }\r\n                else if(Player.currentPlayer.getPhase().equals(Phase.BATTLE)){\r\n                    RoundController.mainPhase2();\r\n                    phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/main.png\")));\r\n                    animatePhase();\r\n                }\r\n                else if(Player.currentPlayer.getPhase().equals(Phase.MAIN2)){\r\n                    RoundController.endPhase();\r\n                    phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/end.png\")));\r\n                    animatePhase();\r\n                    updateBoard(currentHand, enemyHand, currentMonster);\r\n                    animateNextPhase(\"draw\");\r\n                    goToNextPhase();\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void animateNextPhase(String nextPhase) {\r\n        new java.util.Timer().schedule(\r\n                new java.util.TimerTask() {\r\n                    @Override\r\n                    public void run() {\r\n                        phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/\" + nextPhase + \".png\")));\r\n                        animatePhase();\r\n                    }\r\n                },\r\n                1000\r\n        );\r\n    }\r\n\r\n    private void updateBoard(ArrayList<ImageView> currentHand, ArrayList<ImageView> enemyHand, ArrayList<ImageView> currentMonster) {\r\n\r\n        if (Player.currentPlayer.getBoard().getGraveyard().size() != 0)\r\n            graveyard.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n        else graveyard.setImage(null);\r\n        if (Player.opponent.getBoard().getGraveyard().size() != 0)\r\n            enemyGraveyard.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n        else enemyGraveyard.setImage(null);\r\n        firstPlayerLP.setText(Integer.toString(Player.thePlayer.getLifePoint()));\r\n        secondPlayerLP.setText(Integer.toString(RoundController.otherPlayer.getLifePoint()));\r\n        turn.setText(\"Now is \" + Player.currentPlayer.getNickname() + \"'s turn\");\r\n\r\n        for (int i = 0; i < 6; i++) {\r\n            currentHand.get(i).setImage(null);\r\n            for (int j = 0; j < Player.currentPlayer.getBoard().getHand().size(); j++) {\r\n                currentHand.get(j).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            }\r\n        }\r\n        for (int i = 0; i < Player.opponent.getBoard().getHand().size(); i++) {\r\n            enemyHand.get(i).setImage(null);\r\n            for (int j = 0; j < Player.opponent.getBoard().getHand().size(); j++) {\r\n                enemyHand.get(j).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            }\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n\r\n\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) != null) {\r\n                currentMonster.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/\" +\r\n                        Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).getCardName().replaceAll(\"\\\\s+\", \"\")\r\n                        + \".jpg\")));\r\n            } else currentMonster.get(i).setImage(null);\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(i) != null)\r\n                currentSpell.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/\" +\r\n                        Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(i).getCardName().replaceAll(\"\\\\s+\", \"\")\r\n                        + \".jpg\")));\r\n            else currentSpell.get(i).setImage(null);\r\n\r\n            if (Player.opponent.getBoard().getFieldCardsForMonsters().get(i) != null)\r\n                enemyMonster.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/\" +\r\n                        Player.opponent.getBoard().getFieldCardsForMonsters().get(i).getCardName().replaceAll(\"\\\\s+\", \"\")\r\n                        + \".jpg\")));\r\n            else enemyMonster.get(i).setImage(null);\r\n            if (Player.opponent.getBoard().getFieldCardsForSpellTraps().get(i) != null)\r\n                enemySpell.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/\" +\r\n                        Player.opponent.getBoard().getFieldCardsForSpellTraps().get(i).getCardName().replaceAll(\"\\\\s+\", \"\")\r\n                        + \".jpg\")));\r\n            else enemySpell.get(i).setImage(null);\r\n        }\r\n    }\r\n\r\n    private ArrayList<ImageView> makeMonsterList() {\r\n        currentMonster = new ArrayList<>();\r\n        enemyMonster = new ArrayList<>();\r\n        currentMonster.add(monster1);\r\n        currentMonster.add(monster2);\r\n        currentMonster.add(monster3);\r\n        currentMonster.add(monster4);\r\n        currentMonster.add(monster5);\r\n        enemyMonster.add(enemyMonster1);\r\n        enemyMonster.add(enemyMonster2);\r\n        enemyMonster.add(enemyMonster3);\r\n        enemyMonster.add(enemyMonster4);\r\n        enemyMonster.add(enemyMonster5);\r\n        return currentMonster;\r\n    }\r\n\r\n    private void makeSpellList() {\r\n        currentSpell = new ArrayList<>();\r\n        enemySpell = new ArrayList<>();\r\n        currentSpell.add(spell1);\r\n        currentSpell.add(spell2);\r\n        currentSpell.add(spell3);\r\n        currentSpell.add(spell4);\r\n        currentSpell.add(spell5);\r\n        enemySpell.add(enemySpell1);\r\n        enemySpell.add(enemySpell2);\r\n        enemySpell.add(enemySpell3);\r\n        enemySpell.add(enemySpell4);\r\n        enemySpell.add(enemySpell5);\r\n    }\r\n\r\n    private ArrayList<ImageView> makeEnemyHandList() {\r\n        enemyHand = new ArrayList<>();\r\n        enemyHand.add(enemyHand1);\r\n        enemyHand.add(enemyHand2);\r\n        enemyHand.add(enemyHand3);\r\n        enemyHand.add(enemyHand4);\r\n        enemyHand.add(enemyHand5);\r\n        enemyHand.add(enemyHand6);\r\n        return enemyHand;\r\n    }\r\n\r\n    private ArrayList<ImageView> makeHandList() {\r\n        ArrayList<ImageView> currentHand = new ArrayList<>();\r\n        currentHand.add(hand1);\r\n        currentHand.add(hand2);\r\n        currentHand.add(hand3);\r\n        currentHand.add(hand4);\r\n        currentHand.add(hand5);\r\n        currentHand.add(hand6);\r\n        return currentHand;\r\n    }\r\n\r\n    private void selectCard() {\r\n        for (int i = 0; i < 5; i++) {\r\n            int finalI = i;\r\n            currentMonster.get(i).setOnMouseClicked(event -> {\r\n                tribute.set(finalI);\r\n                Card card = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(finalI);\r\n                setViewForSelected(card);\r\n                if(!isOneTributeActive && !isTwoTributeActive) setButtonsForMonster();\r\n            });\r\n        }\r\n\r\n        hand1.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(0);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand2.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(1);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand3.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(2);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand4.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(3);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand5.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(4);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand6.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(5);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n    }\r\n\r\n    private void setViewForSelected(Card card) {\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n        cardShow.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/\" +\r\n                card.getCardName().replaceAll(\"\\\\s+\", \"\")\r\n                + \".jpg\")));\r\n        if (card.getCardCategory().equals(CardCategory.MONSTER) ||\r\n                card.getCardCategory().equals(CardCategory.MONSTEREFFECT)) {\r\n            attack.setText(Integer.toString(card.getAttack()));\r\n            defence.setText(Integer.toString(card.getAttack()));\r\n        } else {\r\n            attack.setText(\"---\");\r\n            defence.setText(\"---\");\r\n        }\r\n        description.setText(card.getDescription());\r\n        GameController.selectedCard = card;\r\n    }\r\n\r\n    private void setButtonsForHand() {\r\n        setAction(\"hand\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Summon.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/set.png\")));\r\n        button3.setImage(new Image(getClass().getResourceAsStream(\"/PNG/active.png\")));\r\n        button4.setImage(new Image(getClass().getResourceAsStream(\"/PNG/nextPhase.png\")));\r\n    }\r\n\r\n    private void setButtonsForMonster() {\r\n        setAction(\"monster\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/attack.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/direct.png\")));\r\n        button3.setImage(new Image(getClass().getResourceAsStream(\"/PNG/active.png\")));\r\n        button4.setImage(new Image(getClass().getResourceAsStream(\"/PNG/nextPhase.png\")));\r\n    }\r\n\r\n    private void callButton1() {\r\n        if (isHandSelected) summonMonster();\r\n        else if (isOneTributeActive) callTributeOne();\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n    }\r\n\r\n    private void callButton2() {\r\n        //if(isHandSelected) summonMonster();\r\n        if (isOneTributeActive) cancel();\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n    }\r\n\r\n\r\n\r\n\r\n    public void run(String input) {\r\n        MainMenu.checked = false;\r\n        MainMenu.showCurrentMenu(Util.getCommand(input, \"menu show-current\"));\r\n        CardMenu.showSelectedCard(Util.getCommand(input, \"card show --selected\"));\r\n        selectCard(Util.getCommand(input, \"select --(\\\\S+)( --opponent)? (\\\\d+)\"));\r\n        showGraveyard(Util.getCommand(input, \"show graveyard\"));\r\n        deSelectCard(Util.getCommand(input, \"select -d\"));\r\n        activeSpell(Util.getCommand(input, \"activate effect\"));\r\n        flipSummon(Util.getCommand(input, \"flip-summon\"));\r\n        setCard(Util.getCommand(input, \"set\"));\r\n        setPosition(Util.getCommand(input, \"set --position ((attack)|(defence))\"));\r\n        attackToMonster(Util.getCommand(input, \"attack (\\\\d+)\"));\r\n        attackDirect(Util.getCommand(input, \"attack direct\"));\r\n\r\n        showBoard(Util.getCommand(input, \"showBoard\"));\r\n        surrender(Util.getCommand(input, \"surrender\"));\r\n        cancel(Util.getCommand(input, \"cancel\"));\r\n        increaseMoney(Util.getCommand(input, \"increase --money (\\\\d+)\"));\r\n        increaseLifePoint(Util.getCommand(input, \"increase --LP (\\\\d+)\"));\r\n        winTheGame(Util.getCommand(input, \"duel set-winner (\\\\S+)\"));\r\n        RoundController.checkEndOfRound();\r\n    }\r\n\r\n\r\n    public void endPhaseMassage() {\r\n        System.out.println(\"It's \" + Player.currentPlayer.getUsername() + \"'s turn\");\r\n    }\r\n\r\n    private void showGraveyard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (Player.currentPlayer.getBoard().getGraveyard().get(0) == null)\r\n                System.out.println(\"graveyard empty\");\r\n            else {\r\n                GameController.printGraveyardCards();\r\n                MainMenu.menu = \"Graveyard\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showBoard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            GameController.showBoard();\r\n        }\r\n    }\r\n\r\n\r\n    public void rollDice(int first, int second, String currentPlayer, String firstPlayer, String secondPlayer) {\r\n        System.out.println(firstPlayer + \" get \" + first);\r\n        System.out.println(secondPlayer + \" get \" + second);\r\n        System.out.println(currentPlayer + \"'s turn\\n\\n\");\r\n    }\r\n\r\n    public void printMiddleChange() {\r\n        System.out.println(\"now it will be \" + Player.opponent.getUsername() + \"’s turn\");\r\n    }\r\n\r\n    public String changePhaseInMiddle() {\r\n        return Communicate.input(\"do you want to active your spell or trap?(yes or no)\");\r\n    }\r\n\r\n    public void informEndOfGame(Player winner, int score) {\r\n        System.out.println(winner.getUsername() + \" won the whole match with score: \" + score + \" - 0\\n\\n\");\r\n    }\r\n\r\n    public void informEndOfRound(Player winner, int score, int remainingRounds) {\r\n        System.out.println(\"Round \" + remainingRounds + \" ended\");\r\n        System.out.println(winner.getUsername() + \" won the game with score: \" + score + \" - 0\");\r\n        remainingRounds--;\r\n        if (remainingRounds != 1)\r\n            System.out.println(\"Now is time for round \" + remainingRounds + \"\\n\\n\");\r\n    }\r\n\r\n\r\n    public void informPhase(Phase phase) {\r\n        switch (phase) {\r\n            case DRAW -> System.out.println(\"phase: Draw Phase\");\r\n            case STANDBY -> System.out.println(\"phase: Standby Phase\");\r\n            case MAIN1 -> System.out.println(\"phase: Main Phase 1\");\r\n            case BATTLE -> System.out.println(\"phase: Battle Phase\");\r\n            case MAIN2 -> System.out.println(\"phase: Main Phase 2\");\r\n            case END -> System.out.println(\"phase: End Phase\");\r\n        }\r\n    }\r\n\r\n    public void drawCard(Card card) {\r\n        System.out.println(\"new card added to the hand : \" + card.getCardName());\r\n    }\r\n\r\n\r\n    private void activeSpell(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else if (Player.currentPlayer.isInOpponentPhase()) {\r\n                if (!GameController.selectedCard.getCardCategory().equals(CardCategory.SPELL) &&\r\n                        !GameController.selectedCard.getCardCategory().equals(CardCategory.TRAP))\r\n                    System.out.println(\"activate effect is only for spell cards.\");\r\n                    //other things needed for if blow\r\n                else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.BACK) &&\r\n                        !GameController.selectedCard.getCardStatus().equals(CardStatus.HAND))\r\n                    System.out.println(\"you can't active this card\");\r\n                else {\r\n                    if (GameController.selectedCard.getCardCategory().equals(CardCategory.TRAP))\r\n                        System.out.println(\"trap activated\");\r\n                    else System.out.println(\"spell activated\");\r\n                    GameController.activeSpell();\r\n                    GameController.getBackFromMiddleChange();\r\n                }\r\n            } else {\r\n                if (!GameController.selectedCard.getCardCategory().equals(CardCategory.SPELL) &&\r\n                        !GameController.selectedCard.getCardCategory().equals(CardCategory.TRAP))\r\n                    System.out.println(\"activate effect is only for spell cards.\");\r\n                else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                        !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n                    System.out.println(\"you can’t activate an effect on this turn\");\r\n                else if (GameController.selectedCard.isActivated())\r\n                    System.out.println(\"you have already activated this card\");\r\n                else if (GameController.isSpellTrapFieldFull() //&& !isForFieldZone\r\n                ) System.out.println(\"spell card zone is full\");\r\n                    //else if( !isActivable) System.out.println(\"preparations of this spell are not done yet\");\r\n                else {\r\n                    System.out.println(\"spell activated\");\r\n                    GameController.activeSpell();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private void summonMonster() {\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) showError(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.HAND) ||\r\n                (!GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTER) &&\r\n                        !GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTEREFFECT)))\r\n            showError(\"you can’t summon this card\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n            showError(\"action not allowed in this phase\");\r\n        else if (GameController.isMonsterFieldFull()) showError(\"monster card zone is full\");\r\n        else if (RoundController.isSummoned) showError(\"you already summoned/set on this turn\");\r\n        else if (GameController.selectedCard.getLevel() > 4 && GameController.selectedCard.getLevel() < 7) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().size() == 0) {\r\n                showError(\"there are not enough cards for tribute\");\r\n                return;\r\n            }\r\n            tributeOne();\r\n        } else if (GameController.selectedCard.getLevel() > 6 && GameController.selectedCard.getLevel() < 9) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().size() < 2) {\r\n                showError(\"there are not enough cards for tribute\");\r\n                return;\r\n            }\r\n            String input = Communicate.input(\"Pick Monster for tribute\");\r\n            if (input.equals(\"cancel\")) {\r\n                showError(\"Tribute Canceled\");\r\n                return;\r\n            }\r\n            int tribute = Integer.parseInt(input);\r\n            tribute = GameController.switchNumberForCurrent(tribute);\r\n            input = Communicate.input(\"Pick another Monster for tribute\");\r\n            if (input.equals(\"cancel\")) {\r\n                showError(\"Tribute Canceled\");\r\n                return;\r\n            }\r\n            int tribute1 = Integer.parseInt(input);\r\n            tribute1 = GameController.switchNumberForCurrent(tribute1);\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute) == null ||\r\n                    Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute1) == null) {\r\n                showError(\"there is no monster on one of these addresses\");\r\n                return;\r\n            }\r\n            int command = GameController.summonMonster(tribute, tribute1);\r\n            if (command != -1) showError(\"summoned successfully2\");\r\n        } else {\r\n            int command = GameController.summonMonster(-1, -1);\r\n            if (command != -1) showError(\"summoned successfully3\");\r\n        }\r\n\r\n    }\r\n\r\n    private void setAction(String act) {\r\n        isHandSelected = false;\r\n        isSpellSelected = false;\r\n        isOneTributeActive = false;\r\n        isTwoTributeActive = false;\r\n        isMonsterSelected = false;\r\n        if (act.equals(\"oneTribute\")) isOneTributeActive = true;\r\n        if (act.equals(\"twoTribute\")) isTwoTributeActive = true;\r\n        if (act.equals(\"hand\")) isHandSelected = true;\r\n        if (act.equals(\"monster\")) isMonsterSelected = true;\r\n        if (act.equals(\"spell\")) isSpellSelected = true;\r\n\r\n    }\r\n\r\n    private void tributeOne() {\r\n        showError(\"Pick Monster for tribute\");\r\n        setAction(\"oneTribute\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/tribute.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cancel.png\")));\r\n        button3.setImage(null);\r\n        button4.setImage(null);\r\n    }\r\n\r\n    private void callTributeOne() {\r\n        if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute.get()) == null) {\r\n            showError(\"there are no monsters on this address\");\r\n            return;\r\n        }\r\n        int command = GameController.summonMonster(tribute.get(), -1);\r\n        if (command != -1) showError(\"summoned successfully\");\r\n        setButtonsForHand();\r\n        GameController.showBoard();\r\n    }\r\n\r\n    private void cancel() {\r\n        GameController.selectedCard = null;\r\n        showError(\"tribute canceled\");\r\n        setButtonsForHand();\r\n    }\r\n\r\n\r\n    private void flipSummon(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (Player.currentPlayer.isInOpponentPhase())\r\n                System.out.println(\"it’s not your turn to play this kind of moves\");\r\n            else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK) &&\r\n                    !GameController.selectedCard.getCardStatus().equals(CardStatus.DEFENCE) &&\r\n                    !GameController.selectedCard.getCardStatus().equals(CardStatus.SET))\r\n                System.out.println(\"you can’t change this card position\");\r\n            else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                    !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n                System.out.println(\"action not allowed in this phase\");\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.SET) ||\r\n                    GameController.selectedCard.isSummoned())\r\n                System.out.println(\"you can’t flip summon this card\");\r\n            else {\r\n                System.out.println(\"flip summoned successfully\");\r\n                GameController.flipSummon();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setCard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (Player.currentPlayer.isInOpponentPhase())\r\n                System.out.println(\"it’s not your turn to play this kind of moves\");\r\n            else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.HAND))\r\n                System.out.println(\"you can’t set this card\");\r\n            else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                    !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n                System.out.println(\"action not allowed in this phase\");\r\n            else if (GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTER) ||\r\n                    GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTEREFFECT)) {\r\n                if (GameController.isMonsterFieldFull()) System.out.println(\"monster card zone is full\");\r\n                else if (RoundController.isSummoned) System.out.println(\"you already summoned/set on this turn\");\r\n                else {\r\n                    GameController.setMonster();\r\n                    System.out.println(\"set successfully1\");\r\n                }\r\n            } else {\r\n                if (GameController.isSpellTrapFieldFull()) System.out.println(\"spell card zone is full\");\r\n                else {\r\n                    GameController.setSpell();\r\n                    System.out.println(\"set successfully2\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setPosition(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            String position = matcher.group(1);\r\n            if (Player.currentPlayer.isInOpponentPhase())\r\n                System.out.println(\"it’s not your turn to play this kind of moves\");\r\n            else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK) &&\r\n                    !GameController.selectedCard.getCardStatus().equals(CardStatus.DEFENCE))\r\n                System.out.println(\"you can’t change this card position\");\r\n            else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                    !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n                System.out.println(\"action not allowed in this phase\");\r\n            else if (GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK) && position.equals(\"attack\"))\r\n                System.out.println(\"this card is already in the wanted position\");\r\n            else if (GameController.selectedCard.getCardStatus().equals(CardStatus.DEFENCE) && position.equals(\"defence\"))\r\n                System.out.println(\"this card is already in the wanted position\");\r\n            else if (GameController.selectedCard.isChanged())\r\n                System.out.println(\"you already changed this card position in this turn\");\r\n            else {\r\n                GameController.changeCardPosition(position);\r\n                System.out.println(\"monster card position changed successfully\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void attackToMonster(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            int enemyMonsterIndex = GameController.switchNumberForCurrent(Integer.parseInt(matcher.group(1)));\r\n            if (Player.currentPlayer.isInOpponentPhase())\r\n                System.out.println(\"it’s not your turn to play this kind of moves\");\r\n            else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK))\r\n                System.out.println(\"you can’t attack with this card\");\r\n            else if (!Player.currentPlayer.getPhase().equals(Phase.BATTLE))\r\n                System.out.println(\"you can’t do this action in this phase\");\r\n            else if (GameController.selectedCard.isAttacked())\r\n                System.out.println(\"this card already attacked\");\r\n            else if (Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex) == null)\r\n                System.out.println(\"there is no card to attack here\");\r\n            else {\r\n                GameController.attackMonster(enemyMonsterIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void printMonsterAttacks(int key, int damage, int enemyMonsterIndex) {\r\n        if (key == 1) System.out.println(\"your opponent’s monster is destroyed and your\" +\r\n                \" opponent receives \" + damage + \" battle damage\");\r\n        else if (key == 2) System.out.println(\"both you and your opponent monster cards are destroyed and no\\n\" +\r\n                \"one receives damage\");\r\n        else if (key == 3) System.out.println(\"Your monster card is destroyed and you received\" +\r\n                \" opponent receives \" + damage + \" battle damage\");\r\n        else if (key == 4) System.out.println(\"the defense position monster is destroyed\");\r\n        else if (key == 5) System.out.println(\"no card is destroyed\");\r\n        else if (key == 6) System.out.println(\"no card is destroyed and you received \" + damage + \" battle damage\");\r\n        else if (key == 7) System.out.println(\"opponent’s monster card was \" +\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex).getCardName() +\r\n                \" and the defense position monster is destroyed\");\r\n        else if (key == 8) System.out.println(\"opponent’s monster card was \" +\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex).getCardName() +\r\n                \" and no card is destroyed\");\r\n        else if (key == 9) System.out.println(\"opponent’s monster card was \" +\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex).getCardName() +\r\n                \" and no card is destroyed and you received \" + damage + \" battle damage\");\r\n\r\n    }\r\n\r\n    private void attackDirect(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (Player.currentPlayer.isInOpponentPhase())\r\n                System.out.println(\"it’s not your turn to play this kind of moves\");\r\n            else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK))\r\n                System.out.println(\"you can’t attack with this card\");\r\n            else if (!Player.currentPlayer.getPhase().equals(Phase.BATTLE))\r\n                System.out.println(\"you can’t do this action in this phase\");\r\n            else if (GameController.selectedCard.isAttacked())\r\n                System.out.println(\"this card already attacked\");\r\n            else if (!GameController.isEnemyMonsterFieldEmpty())\r\n                System.out.println(\"you can’t attack the opponent directly\");\r\n            else {\r\n                int damage = GameController.attackDirect();\r\n                if (damage != -1) System.out.println(\"your opponent receives \" + damage + \" battle damage\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void selectCard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            String opponent = \"\";\r\n            String cardPosition = matcher.group(1);\r\n            if (matcher.group(2) != null) opponent = matcher.group(2);\r\n            int number = Integer.parseInt(matcher.group(3));\r\n            int massage = GameController.selectCard(cardPosition, number, opponent);\r\n            if (massage == 1) System.out.println(\"card selected\");\r\n            else if (massage == 0) System.out.println(\"no card found in the given position\");\r\n            else System.out.println(\"invalid selection\");\r\n            if (massage == 1 && !opponent.equals(\"\")) GameController.setIsOpponentCardSelected(true);\r\n        }\r\n    }\r\n\r\n    public void deSelectCard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else {\r\n                System.out.println(\"card deselected\");\r\n                GameController.deSelectCard();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void cancel(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n\r\n        }\r\n    }\r\n\r\n    private void surrender(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            Player.currentPlayer.setLifePoint(0);\r\n        }\r\n    }\r\n\r\n    private void increaseMoney(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            Player.currentPlayer.increaseMoney(Integer.parseInt(matcher.group(1)));\r\n        }\r\n    }\r\n\r\n    private void increaseLifePoint(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            Player.currentPlayer.increaseLifePoint(Integer.parseInt(matcher.group(1)));\r\n        }\r\n    }\r\n\r\n    private void winTheGame(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (matcher.group(1).equals(Player.currentPlayer.getNickname())) {\r\n                Player.opponent.setLifePoint(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showError(String error) {\r\n        massage.setText(error);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/View/GameMenu.java b/src/main/java/View/GameMenu.java
--- a/src/main/java/View/GameMenu.java	(revision 622950d6f9a1eca892d789143bdcc57b6b3ede2c)
+++ b/src/main/java/View/GameMenu.java	(date 1625415450652)
@@ -32,7 +32,7 @@
     public ImageView phase;
     private ArrayList<ImageView> currentHand, enemyHand, currentMonster, enemyMonster, currentSpell, enemySpell;
     boolean isHandSelected = false, isMonsterSelected = false, isSpellSelected = false, isOneTributeActive = false,
-            isTwoTributeActive = false;
+            isTwoTributeActive = false, isAttackActive = false;
     AtomicInteger tribute = new AtomicInteger();
 
 
@@ -72,23 +72,21 @@
 
 
     private void goToNextPhase() {
-        if (Player.currentPlayer.getPhase().equals(Phase.DRAW)){
+        if (Player.currentPlayer.getPhase().equals(Phase.DRAW)) {
             RoundController.mainPhase1();
             animateNextPhase("main");
         }
         button4.setOnMouseClicked(event -> {
             if (!isOneTributeActive && !isTwoTributeActive) {
-                if(Player.currentPlayer.getPhase().equals(Phase.MAIN1)){
+                if (Player.currentPlayer.getPhase().equals(Phase.MAIN1)) {
                     RoundController.battlePhase();
                     phase.setImage(new Image(getClass().getResourceAsStream("/PNG/battle.png")));
                     animatePhase();
-                }
-                else if(Player.currentPlayer.getPhase().equals(Phase.BATTLE)){
+                } else if (Player.currentPlayer.getPhase().equals(Phase.BATTLE)) {
                     RoundController.mainPhase2();
                     phase.setImage(new Image(getClass().getResourceAsStream("/PNG/main.png")));
                     animatePhase();
-                }
-                else if(Player.currentPlayer.getPhase().equals(Phase.MAIN2)){
+                } else if (Player.currentPlayer.getPhase().equals(Phase.MAIN2)) {
                     RoundController.endPhase();
                     phase.setImage(new Image(getClass().getResourceAsStream("/PNG/end.png")));
                     animatePhase();
@@ -221,11 +219,17 @@
     private void selectCard() {
         for (int i = 0; i < 5; i++) {
             int finalI = i;
+            enemyMonster.get(i).setOnMouseClicked(event -> {
+                Card card = Player.opponent.getBoard().getFieldCardsForMonsters().get(finalI);
+                if (isAttackActive) detectEnemyToAttack(finalI);
+                else if (card != null) setViewForSelected(card);
+
+            });
             currentMonster.get(i).setOnMouseClicked(event -> {
                 tribute.set(finalI);
                 Card card = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(finalI);
-                setViewForSelected(card);
-                if(!isOneTributeActive && !isTwoTributeActive) setButtonsForMonster();
+                if (card != null) setViewForSelected(card);
+                if (!isOneTributeActive && !isTwoTributeActive) setButtonsForMonster();
             });
         }
 
@@ -297,6 +301,7 @@
     private void callButton1() {
         if (isHandSelected) summonMonster();
         else if (isOneTributeActive) callTributeOne();
+        else if (isMonsterSelected) attackToMonster();
         updateBoard(currentHand, enemyHand, currentMonster);
     }
 
@@ -307,8 +312,6 @@
     }
 
 
-
-
     public void run(String input) {
         MainMenu.checked = false;
         MainMenu.showCurrentMenu(Util.getCommand(input, "menu show-current"));
@@ -320,7 +323,7 @@
         flipSummon(Util.getCommand(input, "flip-summon"));
         setCard(Util.getCommand(input, "set"));
         setPosition(Util.getCommand(input, "set --position ((attack)|(defence))"));
-        attackToMonster(Util.getCommand(input, "attack (\\d+)"));
+
         attackDirect(Util.getCommand(input, "attack direct"));
 
         showBoard(Util.getCommand(input, "showBoard"));
@@ -498,11 +501,13 @@
         isOneTributeActive = false;
         isTwoTributeActive = false;
         isMonsterSelected = false;
+        isAttackActive = false;
         if (act.equals("oneTribute")) isOneTributeActive = true;
         if (act.equals("twoTribute")) isTwoTributeActive = true;
         if (act.equals("hand")) isHandSelected = true;
         if (act.equals("monster")) isMonsterSelected = true;
         if (act.equals("spell")) isSpellSelected = true;
+        if (act.equals("attack")) isAttackActive = true;
 
     }
 
@@ -611,24 +616,31 @@
         }
     }
 
-    private void attackToMonster(Matcher matcher) {
-        if (!MainMenu.checked && matcher.matches()) {
-            MainMenu.checked = true;
-            int enemyMonsterIndex = GameController.switchNumberForCurrent(Integer.parseInt(matcher.group(1)));
-            if (Player.currentPlayer.isInOpponentPhase())
-                System.out.println("it’s not your turn to play this kind of moves");
-            else if (GameController.selectedCard == null) System.out.println("no card is selected yet");
-            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK))
-                System.out.println("you can’t attack with this card");
-            else if (!Player.currentPlayer.getPhase().equals(Phase.BATTLE))
-                System.out.println("you can’t do this action in this phase");
-            else if (GameController.selectedCard.isAttacked())
-                System.out.println("this card already attacked");
-            else if (Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex) == null)
-                System.out.println("there is no card to attack here");
-            else {
-                GameController.attackMonster(enemyMonsterIndex);
-            }
+    private void attackToMonster() {
+        if (Player.currentPlayer.isInOpponentPhase())
+            showError("it’s not your turn to play this kind of moves");
+        else if (GameController.selectedCard == null) System.out.println("no card is selected yet");
+        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK))
+            showError("you can’t attack with this card");
+        else if (!Player.currentPlayer.getPhase().equals(Phase.BATTLE))
+            showError("you can’t do this action in this phase");
+        else if (GameController.selectedCard.isAttacked())
+            showError("this card already attacked");
+        else {
+            showError("select enemy card to attack");
+            setAction("attack");
+        }
+
+    }
+
+    private void detectEnemyToAttack(int enemyMonsterIndex) {
+
+
+        if (Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex) == null)
+            showError("there is no card to attack here");
+        else {
+            GameController.attackMonster(enemyMonsterIndex);
+            updateBoard(currentHand, enemyHand, currentMonster);
         }
     }
 
