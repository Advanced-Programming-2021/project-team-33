Index: src/main/java/View/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.GameController;\r\nimport Controller.ProgramController;\r\nimport Controller.RoundController;\r\nimport Controller.Util;\r\nimport Model.Card;\r\nimport Model.CardCategory;\r\nimport Model.CardStatus;\r\nimport Model.Player;\r\nimport javafx.animation.FadeTransition;\r\nimport javafx.animation.ScaleTransition;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ProgressBar;\r\nimport javafx.scene.control.TextInputDialog;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseButton;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.ImagePattern;\r\nimport javafx.scene.shape.Circle;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.MalformedURLException;\r\nimport java.util.ArrayList;\r\nimport java.util.Optional;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameMenu {\r\n\r\n\r\n    public ImageView cardShow, hand1, hand2, hand3, hand4, hand5, hand6, enemyHand1, enemyHand2, enemyHand3, enemyHand4, enemyHand5, enemyHand6;\r\n    public ImageView monster1, monster2, monster3, monster4, monster5, spell1, spell2, spell3, spell4, spell5, enemySpell1, enemySpell2, enemySpell3;\r\n    public ImageView enemySpell4, enemySpell5, enemyMonster1, enemyMonster2, enemyMonster3, enemyMonster4, enemyMonster5, graveyard, enemyGraveyard;\r\n    public Label firstPlayerName, secondPlayerName, firstPlayerLP, secondPlayerLP, attack, defence, description, turn;\r\n    public ImageView button1, button2, button3, button4;\r\n    public Text massage;\r\n    public ImageView phase;\r\n    public ProgressBar lp1, lp2;\r\n    public Circle avatar1, avatar2;\r\n    public Rectangle background;\r\n    public ImageView surrender, pause;\r\n    public Text pauseText;\r\n    public AnchorPane scene;\r\n    public ImageView exclamation;\r\n    public GridPane graveyardList;\r\n    public Rectangle graveyardBack;\r\n    public ImageView exit;\r\n    public ImageView explosion;\r\n    private ArrayList<ImageView> currentHand, enemyHand, currentMonster, enemyMonster, currentSpell, enemySpell;\r\n    boolean isHandSelected = false, isMonsterSelected = false, isSpellSelected = false, isOneTributeActive = false,\r\n            isTwoTributeActive = false, isAttackActive = false, isTrapActive = false, isPaused = false;\r\n    AtomicInteger tribute = new AtomicInteger();\r\n\r\n\r\n    public void start() throws IOException {\r\n        Stage primaryStage = ProgramController.getStage();\r\n        Parent root = FXMLLoader.load(getClass().getResource(\"gameMenu.fxml\"));\r\n        primaryStage.setTitle(\"Yu-Gi-Oh\");\r\n        primaryStage.setScene(new Scene(root, 1280, 720));\r\n        primaryStage.show();\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        exit.toBack();\r\n        setPauseScene();\r\n        setCheat();\r\n        loadImageForProfile(Player.thePlayer, avatar1);\r\n        if (!RoundController.otherPlayer.getUsername().equals(\"Ai\"))\r\n            loadImageForProfile(RoundController.otherPlayer, avatar2);\r\n        secondPlayerName.setText(RoundController.otherPlayer.getNickname());\r\n        firstPlayerName.setText(Player.thePlayer.getNickname());\r\n        makeSpellList();\r\n        currentHand = makeHandList();\r\n        enemyHand = makeEnemyHandList();\r\n        currentMonster = makeMonsterList();\r\n        button1.setOnMouseClicked(event -> callButton1());\r\n        button2.setOnMouseClicked(event -> callButton2());\r\n        button3.setOnMouseClicked(event -> callButton3());\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n        animatePhase();\r\n        goToNextPhase();\r\n        selectCard();\r\n        graveyard.setOnMouseClicked(event -> showGraveYard(Player.currentPlayer));\r\n        enemyGraveyard.setOnMouseClicked(event -> showGraveYard(Player.opponent));\r\n        exit.setOnMouseClicked(event -> {\r\n            exit.toBack();\r\n            graveyardBack.toBack();\r\n            graveyardList.toBack();\r\n        });\r\n    }\r\n\r\n    private void showGraveYard(Player player){\r\n        int count = player.getBoard().getGraveyard().size();\r\n        exit.toFront();\r\n        graveyardBack.toFront();\r\n        graveyardList.toFront();\r\n        for (int i = 0; i < 4; i++) {\r\n            for (int j = 0; j < 10; j++) {\r\n                count--;\r\n                if(count < 0) return;\r\n                Image image = Util.getImage(player.getBoard().getGraveyard().get(count).getCardName());\r\n                ImageView imageView = new ImageView(image);\r\n                imageView.setFitHeight(124);\r\n                imageView.setFitWidth(75);\r\n                imageView.setId(\"mainDeckCard\" + i + \"_\" + j);\r\n                graveyardList.add(imageView, j, i);\r\n                int finalCount = count;\r\n                imageView.setOnMouseClicked(event -> {\r\n                        cardShow.setImage(Util.getImage(player.getBoard().getGraveyard().get(finalCount).getCardName()));\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setCheat() {\r\n        exclamation.setOnMouseClicked(event -> {\r\n            TextInputDialog dialog = new TextInputDialog(\"\");\r\n            dialog.setTitle(\"Cheat Console\");\r\n            dialog.setHeaderText(\"Cheat Console\");\r\n            dialog.setContentText(\"Enter your cheat code:\");\r\n            Optional<String> result = dialog.showAndWait();\r\n\r\n            if (result.get().matches(\"increase --money (\\\\d+)\"))\r\n                increaseMoney(Util.getCommand(result.get(), \"increase --money (\\\\d+)\"));\r\n             else if (result.get().matches(\"increase --LP (\\\\d+)\"))\r\n                increaseLifePoint(Util.getCommand(result.get(), \"increase --LP (\\\\d+)\"));\r\n            else if (result.get().matches(\"duel set-winner (\\\\S+)\")) {\r\n                winTheGame(Util.getCommand(result.get(), \"duel set-winner (\\\\S+)\"));\r\n                updateBoard(currentHand, enemyHand, currentMonster);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    private void setPauseScene() {\r\n        background.setFill(null);\r\n        surrender.setImage(null);\r\n        pauseText.setText(null);\r\n        surrender.toBack();\r\n        pause.setOnMouseClicked(event -> {\r\n            if (!isPaused) {\r\n                background.setFill(Color.GRAY);\r\n                background.setOpacity(.6);\r\n                pauseText.setText(\"Pause\");\r\n                pauseText.toFront();\r\n                surrender.toFront();\r\n                surrender.setImage(new Image(getClass().getResourceAsStream(\"/PNG/surrender.png\")));\r\n                isPaused = true;\r\n            } else {\r\n                background.setFill(null);\r\n                surrender.setImage(null);\r\n                surrender.toBack();\r\n                pause.toBack();\r\n                pauseText.setText(null);\r\n                isPaused = false;\r\n            }\r\n        });\r\n        surrender.setOnMouseClicked(event -> surrender());\r\n    }\r\n\r\n    private void animatePhase() {\r\n        FadeTransition fade = new FadeTransition();\r\n        fade.setDuration(Duration.millis(1000));\r\n        fade.setFromValue(10);\r\n        fade.setToValue(0);\r\n        fade.setAutoReverse(true);\r\n        fade.setNode(phase);\r\n        fade.play();\r\n    }\r\n\r\n\r\n    private void goToNextPhase() {\r\n        if (Player.currentPlayer.getPhase().equals(Phase.DRAW)) {\r\n            RoundController.mainPhase1();\r\n            animateNextPhase(\"main\");\r\n        }\r\n        button4.setOnMouseClicked(event -> {\r\n            MainMenu.playSound(Util.CLICK_MUSIC);\r\n            if (!isOneTributeActive && !isTwoTributeActive) {\r\n                if (Player.currentPlayer.getPhase().equals(Phase.MAIN1)) {\r\n                    RoundController.battlePhase();\r\n                    phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/battle.png\")));\r\n                    animatePhase();\r\n                } else if (Player.currentPlayer.getPhase().equals(Phase.BATTLE)) {\r\n                    RoundController.mainPhase2();\r\n                    phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/main.png\")));\r\n                    animatePhase();\r\n                } else if (Player.currentPlayer.getPhase().equals(Phase.MAIN2)) {\r\n                    RoundController.endPhase();\r\n                    phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/end.png\")));\r\n                    animatePhase();\r\n                    updateBoard(currentHand, enemyHand, currentMonster);\r\n                    animateNextPhase(\"draw\");\r\n                    goToNextPhase();\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void loadImageForProfile(Player player, Circle avatar) {\r\n        ImagePattern backgroundProfile;\r\n        int ID = player.getProfileID();\r\n        if (player.getProfileAddress() == null) {\r\n            if (ID <= 50) {\r\n                backgroundProfile = new ImagePattern(new Image(getClass().getResourceAsStream(\"/PNG/Profile/Profile (\" + ID + \").png\")));\r\n                avatar.setFill(backgroundProfile);\r\n            }\r\n        } else {\r\n            File file = new File(player.getProfileAddress());\r\n            try {\r\n                backgroundProfile = new ImagePattern(new Image(file.toURI().toURL().toExternalForm()));\r\n                avatar.setFill(backgroundProfile);\r\n            } catch (MalformedURLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void animateNextPhase(String nextPhase) {\r\n        new java.util.Timer().schedule(\r\n                new java.util.TimerTask() {\r\n                    @Override\r\n                    public void run() {\r\n                        phase.setImage(new Image(getClass().getResourceAsStream(\"/PNG/\" + nextPhase + \".png\")));\r\n                        animatePhase();\r\n                    }\r\n                },\r\n                1000\r\n        );\r\n    }\r\n\r\n    private void updateBoard(ArrayList<ImageView> currentHand, ArrayList<ImageView> enemyHand, ArrayList<ImageView> currentMonster) {\r\n\r\n        if (Player.currentPlayer.getBoard().getGraveyard().size() != 0)\r\n            graveyard.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n        else graveyard.setImage(null);\r\n        if (Player.opponent.getBoard().getGraveyard().size() != 0)\r\n            enemyGraveyard.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n        else enemyGraveyard.setImage(null);\r\n        lp1.setProgress(Player.thePlayer.getLifePoint() / 8000.0);\r\n        lp2.setProgress(RoundController.otherPlayer.getLifePoint() / 8000.0);\r\n        firstPlayerLP.setText(Player.thePlayer.getUsername());\r\n        secondPlayerLP.setText(RoundController.otherPlayer.getUsername());\r\n        turn.setText(\"Now is \" + Player.currentPlayer.getNickname() + \"'s turn\");\r\n\r\n        for (int i = 0; i < 6; i++) {\r\n            currentHand.get(i).setImage(null);\r\n            for (int j = 0; j < Player.currentPlayer.getBoard().getHand().size(); j++) {\r\n                currentHand.get(j).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            }\r\n        }\r\n        for (int i = 0; i < Player.opponent.getBoard().getHand().size(); i++) {\r\n            enemyHand.get(i).setImage(null);\r\n            for (int j = 0; j < Player.opponent.getBoard().getHand().size(); j++) {\r\n                enemyHand.get(j).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            }\r\n        }\r\n        for (int i = 0; i < 5; i++) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i) == null)\r\n                currentMonster.get(i).setImage(null);\r\n            else if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).getCardStatus() == CardStatus.ATTACK) {\r\n                currentMonster.get(i).setRotate(0);\r\n                currentMonster.get(i).setImage(Util.getImage(Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).getCardName()));\r\n            } else if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).getCardStatus() == CardStatus.SET) {\r\n                currentMonster.get(i).setRotate(90.0);\r\n                currentMonster.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            } else if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).getCardStatus() == CardStatus.DEFENCE) {\r\n                currentMonster.get(i).setRotate(90.0);\r\n                currentMonster.get(i).setImage(Util.getImage(Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(i).getCardName()));\r\n            }\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(i) != null)\r\n                currentSpell.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            else currentSpell.get(i).setImage(null);\r\n\r\n            if (Player.opponent.getBoard().getFieldCardsForMonsters().get(i) == null)\r\n                enemyMonster.get(i).setImage(null);\r\n            else if (Player.opponent.getBoard().getFieldCardsForMonsters().get(i).getCardStatus() == CardStatus.ATTACK) {\r\n                enemyMonster.get(i).setRotate(0);\r\n                enemyMonster.get(i).setImage(Util.getImage(Player.opponent.getBoard().getFieldCardsForMonsters().get(i).getCardName()));\r\n            } else if (Player.opponent.getBoard().getFieldCardsForMonsters().get(i).getCardStatus() == CardStatus.DEFENCE) {\r\n                enemyMonster.get(i).setRotate(90);\r\n                enemyMonster.get(i).setImage(Util.getImage(Player.opponent.getBoard().getFieldCardsForMonsters().get(i).getCardName()));\r\n            } else if (Player.opponent.getBoard().getFieldCardsForMonsters().get(i).getCardStatus() == CardStatus.SET) {\r\n                enemyMonster.get(i).setRotate(90);\r\n                enemyMonster.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            }\r\n            if (Player.opponent.getBoard().getFieldCardsForSpellTraps().get(i) != null)\r\n                enemySpell.get(i).setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cards/Monsters/Unknown.jpg\")));\r\n            else enemySpell.get(i).setImage(null);\r\n        }\r\n        RoundController.checkEndOfRound();\r\n    }\r\n\r\n    private ArrayList<ImageView> makeMonsterList() {\r\n        currentMonster = new ArrayList<>();\r\n        enemyMonster = new ArrayList<>();\r\n        currentMonster.add(monster1);\r\n        currentMonster.add(monster2);\r\n        currentMonster.add(monster3);\r\n        currentMonster.add(monster4);\r\n        currentMonster.add(monster5);\r\n        enemyMonster.add(enemyMonster1);\r\n        enemyMonster.add(enemyMonster2);\r\n        enemyMonster.add(enemyMonster3);\r\n        enemyMonster.add(enemyMonster4);\r\n        enemyMonster.add(enemyMonster5);\r\n        return currentMonster;\r\n    }\r\n\r\n    private void makeSpellList() {\r\n        currentSpell = new ArrayList<>();\r\n        enemySpell = new ArrayList<>();\r\n        currentSpell.add(spell1);\r\n        currentSpell.add(spell2);\r\n        currentSpell.add(spell3);\r\n        currentSpell.add(spell4);\r\n        currentSpell.add(spell5);\r\n        enemySpell.add(enemySpell1);\r\n        enemySpell.add(enemySpell2);\r\n        enemySpell.add(enemySpell3);\r\n        enemySpell.add(enemySpell4);\r\n        enemySpell.add(enemySpell5);\r\n    }\r\n\r\n    private ArrayList<ImageView> makeEnemyHandList() {\r\n        enemyHand = new ArrayList<>();\r\n        enemyHand.add(enemyHand1);\r\n        enemyHand.add(enemyHand2);\r\n        enemyHand.add(enemyHand3);\r\n        enemyHand.add(enemyHand4);\r\n        enemyHand.add(enemyHand5);\r\n        enemyHand.add(enemyHand6);\r\n        return enemyHand;\r\n    }\r\n\r\n    private ArrayList<ImageView> makeHandList() {\r\n        ArrayList<ImageView> currentHand = new ArrayList<>();\r\n        currentHand.add(hand1);\r\n        currentHand.add(hand2);\r\n        currentHand.add(hand3);\r\n        currentHand.add(hand4);\r\n        currentHand.add(hand5);\r\n        currentHand.add(hand6);\r\n        return currentHand;\r\n    }\r\n\r\n    private void selectCard() {\r\n        for (int i = 0; i < 5; i++) {\r\n            int finalI = i;\r\n            enemyMonster.get(i).setOnMouseClicked(event -> {\r\n                Card card = Player.opponent.getBoard().getFieldCardsForMonsters().get(finalI);\r\n\r\n                if (isAttackActive) detectEnemyToAttack(finalI);\r\n                else if (card != null) setViewForSelected(card);\r\n\r\n            });\r\n            currentMonster.get(i).setOnMouseClicked(event -> {\r\n                tribute.set(finalI);\r\n                Card card = Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(finalI);\r\n                if (event.getButton() == MouseButton.SECONDARY && card.getCardStatus().equals(CardStatus.SET))\r\n                    flipSummon();\r\n                else if (event.getButton() == MouseButton.SECONDARY && card.getCardStatus().equals(CardStatus.ATTACK))\r\n                    setPosition(\"defence\");\r\n                else if (event.getButton() == MouseButton.SECONDARY && card.getCardStatus().equals(CardStatus.DEFENCE))\r\n                    setPosition(\"attack\");\r\n                if (card != null) setViewForSelected(card);\r\n                if (!isOneTributeActive && !isTwoTributeActive) setButtonsForMonster();\r\n            });\r\n            currentSpell.get(i).setOnMouseClicked(event -> {\r\n                Card card = Player.currentPlayer.getBoard().getFieldCardsForSpellTraps().get(finalI);\r\n                if (card != null) setViewForSelected(card);\r\n                if (!isOneTributeActive && !isTwoTributeActive) setButtonsForMonster();\r\n            });\r\n            enemySpell.get(i).setOnMouseClicked(event -> {\r\n                Card card = Player.opponent.getBoard().getFieldCardsForSpellTraps().get(finalI);\r\n                if (card != null) setViewForSelected(card);\r\n\r\n            });\r\n        }\r\n\r\n        hand1.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(0);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand2.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(1);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand3.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(2);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand4.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(3);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand5.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(4);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n        hand6.setOnMouseClicked(event -> {\r\n            Card card = Player.currentPlayer.getBoard().getHand().get(5);\r\n            setViewForSelected(card);\r\n            setButtonsForHand();\r\n        });\r\n    }\r\n\r\n    private void setViewForSelected(Card card) {\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n        cardShow.setImage(Util.getImage(card.getCardName()));\r\n        if (card.getCardCategory().equals(CardCategory.MONSTER) ||\r\n                card.getCardCategory().equals(CardCategory.MONSTEREFFECT)) {\r\n            attack.setText(Integer.toString(card.getAttack()));\r\n            defence.setText(Integer.toString(card.getAttack()));\r\n        } else {\r\n            attack.setText(\"---\");\r\n            defence.setText(\"---\");\r\n        }\r\n        description.setText(card.getDescription());\r\n        GameController.selectedCard = card;\r\n    }\r\n\r\n    private void setButtonsForHand() {\r\n        setAction(\"hand\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Summon.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/set.png\")));\r\n        button3.setImage(new Image(getClass().getResourceAsStream(\"/PNG/active.png\")));\r\n        button4.setImage(new Image(getClass().getResourceAsStream(\"/PNG/nextPhase.png\")));\r\n    }\r\n\r\n    private void setButtonsForMonster() {\r\n        setAction(\"monster\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/attack.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/direct.png\")));\r\n        button3.setImage(new Image(getClass().getResourceAsStream(\"/PNG/active.png\")));\r\n        button4.setImage(new Image(getClass().getResourceAsStream(\"/PNG/nextPhase.png\")));\r\n    }\r\n\r\n\r\n    private void callButton1() {\r\n        MainMenu.playSound(Util.CLICK_MUSIC);\r\n        if (isHandSelected) summonMonster();\r\n        else if (isOneTributeActive) callTributeOne();\r\n        else if (isMonsterSelected) attackToMonster();\r\n\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n    }\r\n\r\n    private void callButton2() {\r\n        MainMenu.playSound(Util.CLICK_MUSIC);\r\n        if (isHandSelected) setCard();\r\n        if (isOneTributeActive) cancel();\r\n        else if (isMonsterSelected) attackDirect();\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n    }\r\n\r\n    private void callButton3() {\r\n        MainMenu.playSound(Util.CLICK_MUSIC);\r\n        if (isMonsterSelected || isHandSelected) activeSpell();\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n    }\r\n\r\n\r\n    public void run(String input) {\r\n        MainMenu.checked = false;\r\n        MainMenu.showCurrentMenu(Util.getCommand(input, \"menu show-current\"));\r\n        CardMenu.showSelectedCard(Util.getCommand(input, \"card show --selected\"));\r\n        selectCard(Util.getCommand(input, \"select --(\\\\S+)( --opponent)? (\\\\d+)\"));\r\n        showGraveyard(Util.getCommand(input, \"show graveyard\"));\r\n        deSelectCard(Util.getCommand(input, \"select -d\"));\r\n        showBoard(Util.getCommand(input, \"showBoard\"));\r\n        cancel(Util.getCommand(input, \"cancel\"));\r\n\r\n\r\n        RoundController.checkEndOfRound();\r\n    }\r\n\r\n\r\n    public void endPhaseMassage() {\r\n        System.out.println(\"It's \" + Player.currentPlayer.getUsername() + \"'s turn\");\r\n    }\r\n\r\n    private void showGraveyard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (Player.currentPlayer.getBoard().getGraveyard().get(0) == null)\r\n                System.out.println(\"graveyard empty\");\r\n            else {\r\n                GameController.printGraveyardCards();\r\n                MainMenu.menu = \"Graveyard\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showBoard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            GameController.showBoard();\r\n        }\r\n    }\r\n\r\n\r\n    public void rollDice(int first, int second, String currentPlayer, String firstPlayer, String secondPlayer) {\r\n        System.out.println(firstPlayer + \" get \" + first);\r\n        System.out.println(secondPlayer + \" get \" + second);\r\n        System.out.println(currentPlayer + \"'s turn\\n\\n\");\r\n    }\r\n\r\n    public void printMiddleChange() {\r\n        System.out.println(\"now it will be \" + Player.opponent.getUsername() + \"’s turn\");\r\n    }\r\n\r\n    public void changePhaseInMiddle() {\r\n        showError(\"do you want to active your spell or trap?(yes or no)\");\r\n        setAction(\"trap\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Yes.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/No.png\")));\r\n        button3.setImage(null);\r\n        button4.setImage(null);\r\n    }\r\n\r\n    public void informEndOfGame(Player winner, int score) {\r\n        massage = new Text();\r\n        showError(winner.getUsername() + \" won the whole match with score: \" + score + \" - 0\\n\\n\");\r\n    }\r\n\r\n    public void informEndOfRound(Player winner, int score, int remainingRounds) {\r\n        massage = new Text();\r\n        showError(\"Round \" + remainingRounds + \" ended\");\r\n        showError(winner.getUsername() + \" won the game with score: \" + score + \" - 0\");\r\n        remainingRounds--;\r\n        if (remainingRounds != 1)\r\n            showError(\"Now is time for round \" + remainingRounds + \"\\n\\n\");\r\n    }\r\n\r\n\r\n    public void informPhase(Phase phase) {\r\n        switch (phase) {\r\n            case DRAW -> System.out.println(\"phase: Draw Phase\");\r\n            case STANDBY -> System.out.println(\"phase: Standby Phase\");\r\n            case MAIN1 -> System.out.println(\"phase: Main Phase 1\");\r\n            case BATTLE -> System.out.println(\"phase: Battle Phase\");\r\n            case MAIN2 -> System.out.println(\"phase: Main Phase 2\");\r\n            case END -> System.out.println(\"phase: End Phase\");\r\n        }\r\n    }\r\n\r\n    public void drawCard(Card card) {\r\n        System.out.println(\"new card added to the hand : \" + card.getCardName());\r\n    }\r\n\r\n\r\n    private void activeSpell() {\r\n        if (GameController.selectedCard == null) showError(\"no card is selected yet\");\r\n        else if (Player.currentPlayer.isInOpponentPhase()) {\r\n            if (!GameController.selectedCard.getCardCategory().equals(CardCategory.SPELL) &&\r\n                    !GameController.selectedCard.getCardCategory().equals(CardCategory.TRAP))\r\n                showError(\"activate effect is only for spell cards.\");\r\n                //other things needed for if blow\r\n            else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.BACK) &&\r\n                    !GameController.selectedCard.getCardStatus().equals(CardStatus.HAND))\r\n                showError(\"you can't active this card\");\r\n            else {\r\n                if (GameController.selectedCard.getCardCategory().equals(CardCategory.TRAP))\r\n                    showError(\"trap activated\");\r\n                showError(\"spell activated\");\r\n                GameController.activeSpell();\r\n                GameController.getBackFromMiddleChange();\r\n            }\r\n        } else {\r\n            if (!GameController.selectedCard.getCardCategory().equals(CardCategory.SPELL) &&\r\n                    !GameController.selectedCard.getCardCategory().equals(CardCategory.TRAP))\r\n                showError(\"activate effect is only for spell cards.\");\r\n            else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                    !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n                showError(\"you can’t activate an effect on this turn\");\r\n            else if (GameController.selectedCard.isActivated())\r\n                showError(\"you have already activated this card\");\r\n            else if (GameController.isSpellTrapFieldFull() //&& !isForFieldZone\r\n            ) showError(\"spell card zone is full\");\r\n                //else if( !isActivable) System.out.println(\"preparations of this spell are not done yet\");\r\n            else {\r\n                showError(\"spell activated\");\r\n                GameController.activeSpell();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void summonMonster() {\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) showError(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.HAND) ||\r\n                (!GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTER) &&\r\n                        !GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTEREFFECT)))\r\n            showError(\"you can’t summon this card\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n            showError(\"action not allowed in this phase\");\r\n        else if (GameController.isMonsterFieldFull()) showError(\"monster card zone is full\");\r\n        else if (RoundController.isSummoned) showError(\"you already summoned/set on this turn\");\r\n        else if (RoundController.isRoundFreeze) {\r\n            showError(\"you can't summon because of time seal trap\");\r\n            RoundController.isRoundFreeze = false;\r\n        } else if (GameController.selectedCard.getLevel() > 4 && GameController.selectedCard.getLevel() < 7) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().size() == 0) {\r\n                showError(\"there are not enough cards for tribute\");\r\n                return;\r\n            }\r\n            tributeOne();\r\n        } else if (GameController.selectedCard.getLevel() > 6 && GameController.selectedCard.getLevel() < 9) {\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().size() < 2) {\r\n                showError(\"there are not enough cards for tribute\");\r\n                return;\r\n            }\r\n            String input = Communicate.input(\"Pick Monster for tribute\");\r\n            if (input.equals(\"cancel\")) {\r\n                showError(\"Tribute Canceled\");\r\n                return;\r\n            }\r\n            int tribute = Integer.parseInt(input);\r\n            tribute = GameController.switchNumberForCurrent(tribute);\r\n            input = Communicate.input(\"Pick another Monster for tribute\");\r\n            if (input.equals(\"cancel\")) {\r\n                showError(\"Tribute Canceled\");\r\n                return;\r\n            }\r\n            int tribute1 = Integer.parseInt(input);\r\n            tribute1 = GameController.switchNumberForCurrent(tribute1);\r\n            if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute) == null ||\r\n                    Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute1) == null) {\r\n                showError(\"there is no monster on one of these addresses\");\r\n                return;\r\n            }\r\n            int command = GameController.summonMonster(tribute, tribute1);\r\n            if (command != -1) {\r\n                showError(\"summoned successfully2\");\r\n                MainMenu.playSound(\"src/main/resources/music/summon.wav\");\r\n            }\r\n        } else {\r\n            int command = GameController.summonMonster(-1, -1);\r\n            if (command != -1) showError(\"summoned successfully3\");\r\n            MainMenu.playSound(\"src/main/resources/music/summon.wav\");\r\n        }\r\n\r\n    }\r\n\r\n    public void setAction(String act) {\r\n        isHandSelected = false;\r\n        isSpellSelected = false;\r\n        isOneTributeActive = false;\r\n        isTwoTributeActive = false;\r\n        isMonsterSelected = false;\r\n        isAttackActive = false;\r\n        isTrapActive = false;\r\n        if (act.equals(\"oneTribute\")) isOneTributeActive = true;\r\n        if (act.equals(\"twoTribute\")) isTwoTributeActive = true;\r\n        if (act.equals(\"hand\")) isHandSelected = true;\r\n        if (act.equals(\"monster\")) isMonsterSelected = true;\r\n        if (act.equals(\"spell\")) isSpellSelected = true;\r\n        if (act.equals(\"attack\")) isAttackActive = true;\r\n        if (act.equals(\"trap\")) isTrapActive = true;\r\n\r\n    }\r\n\r\n    private void tributeOne() {\r\n        showError(\"Pick Monster for tribute\");\r\n        setAction(\"oneTribute\");\r\n        button1.setImage(new Image(getClass().getResourceAsStream(\"/PNG/tribute.png\")));\r\n        button2.setImage(new Image(getClass().getResourceAsStream(\"/PNG/Cancel.png\")));\r\n        button3.setImage(null);\r\n        button4.setImage(null);\r\n    }\r\n\r\n    private void callTributeOne() {\r\n        if (Player.currentPlayer.getBoard().getFieldCardsForMonsters().get(tribute.get()) == null) {\r\n            showError(\"there are no monsters on this address\");\r\n            return;\r\n        }\r\n        int command = GameController.summonMonster(tribute.get(), -1);\r\n        if (command != -1) showError(\"summoned successfully\");\r\n        setButtonsForHand();\r\n        GameController.showBoard();\r\n    }\r\n\r\n    private void cancel() {\r\n        GameController.selectedCard = null;\r\n        showError(\"tribute canceled\");\r\n        setButtonsForHand();\r\n    }\r\n\r\n\r\n    private void flipSummon() {\r\n\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) showError(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK) &&\r\n                !GameController.selectedCard.getCardStatus().equals(CardStatus.DEFENCE) &&\r\n                !GameController.selectedCard.getCardStatus().equals(CardStatus.SET))\r\n            showError(\"you can’t change this card position\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n            showError(\"action not allowed in this phase\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.SET) ||\r\n                GameController.selectedCard.isSummoned())\r\n            showError(\"you can’t flip summon this card\");\r\n        else {\r\n            showError(\"flip summoned successfully\");\r\n            GameController.flipSummon();\r\n        }\r\n\r\n    }\r\n\r\n    private void setCard() {\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) showError(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.HAND))\r\n            showError(\"you can’t set this card\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n            showError(\"action not allowed in this phase\");\r\n        else if (GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTER) ||\r\n                GameController.selectedCard.getCardCategory().equals(CardCategory.MONSTEREFFECT)) {\r\n            if (GameController.isMonsterFieldFull()) showError(\"monster card zone is full\");\r\n            else if (RoundController.isSummoned) showError(\"you already summoned/set on this turn\");\r\n            else {\r\n                GameController.setMonster();\r\n                showError(\"set successfully1\");\r\n            }\r\n        } else {\r\n            if (GameController.isSpellTrapFieldFull()) showError(\"spell card zone is full\");\r\n            else {\r\n                GameController.setSpell();\r\n                showError(\"set successfully2\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setPosition(String position) {\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK) &&\r\n                !GameController.selectedCard.getCardStatus().equals(CardStatus.DEFENCE))\r\n            showError(\"you can’t change this card position\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.MAIN1) &&\r\n                !Player.currentPlayer.getPhase().equals(Phase.MAIN2))\r\n            showError(\"action not allowed in this phase\");\r\n        else if (GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK) && position.equals(\"attack\"))\r\n            showError(\"this card is already in the wanted position\");\r\n        else if (GameController.selectedCard.getCardStatus().equals(CardStatus.DEFENCE) && position.equals(\"defence\"))\r\n            showError(\"this card is already in the wanted position\");\r\n        else if (GameController.selectedCard.isChanged())\r\n            showError(\"you already changed this card position in this turn\");\r\n        else {\r\n            GameController.changeCardPosition(position);\r\n            showError(\"monster card position changed successfully\");\r\n        }\r\n    }\r\n\r\n    private void attackToMonster() {\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK))\r\n            showError(\"you can’t attack with this card\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.BATTLE))\r\n            showError(\"you can’t do this action in this phase\");\r\n        else if (GameController.selectedCard.isAttacked())\r\n            showError(\"this card already attacked\");\r\n        else {\r\n            showError(\"select enemy card to attack\");\r\n            setAction(\"attack\");\r\n        }\r\n\r\n    }\r\n\r\n    private void detectEnemyToAttack(int enemyMonsterIndex) {\r\n\r\n        if (Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex) == null)\r\n            showError(\"there is no card to attack here\");\r\n        else {\r\n            GameController.attackMonster(enemyMonsterIndex);\r\n            explosion();\r\n            MainMenu.playSound(\"src/main/resources/music/attack.wav\");\r\n            updateBoard(currentHand, enemyHand, currentMonster);\r\n        }\r\n    }\r\n\r\n    private void explosion() {\r\n        explosion.toFront();\r\n        ScaleTransition trans = new ScaleTransition();\r\n        trans.setDuration(Duration.millis(600));\r\n        trans.setFromX(1);\r\n        trans.setFromY(1);\r\n        trans.setToX(0);\r\n        trans.setToY(0);\r\n        trans.setAutoReverse(true);\r\n        trans.setNode(explosion);\r\n        trans.play();\r\n    }\r\n\r\n    public void printMonsterAttacks(int key, int damage, int enemyMonsterIndex) {\r\n        if (key == 1) System.out.println(\"your opponent’s monster is destroyed and your\" +\r\n                \" opponent receives \" + damage + \" battle damage\");\r\n        else if (key == 2) System.out.println(\"both you and your opponent monster cards are destroyed and no\\n\" +\r\n                \"one receives damage\");\r\n        else if (key == 3) System.out.println(\"Your monster card is destroyed and you received\" +\r\n                \" opponent receives \" + damage + \" battle damage\");\r\n        else if (key == 4) System.out.println(\"the defense position monster is destroyed\");\r\n        else if (key == 5) System.out.println(\"no card is destroyed\");\r\n        else if (key == 6) System.out.println(\"no card is destroyed and you received \" + damage + \" battle damage\");\r\n        else if (key == 7) System.out.println(\"opponent’s monster card was \" +\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex).getCardName() +\r\n                \" and the defense position monster is destroyed\");\r\n        else if (key == 8) System.out.println(\"opponent’s monster card was \" +\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex).getCardName() +\r\n                \" and no card is destroyed\");\r\n        else if (key == 9) System.out.println(\"opponent’s monster card was \" +\r\n                Player.opponent.getBoard().getFieldCardsForMonsters().get(enemyMonsterIndex).getCardName() +\r\n                \" and no card is destroyed and you received \" + damage + \" battle damage\");\r\n\r\n    }\r\n\r\n    private void attackDirect() {\r\n\r\n        if (Player.currentPlayer.isInOpponentPhase())\r\n            showError(\"it’s not your turn to play this kind of moves\");\r\n        else if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n        else if (!GameController.selectedCard.getCardStatus().equals(CardStatus.ATTACK))\r\n            showError(\"you can’t attack with this card\");\r\n        else if (!Player.currentPlayer.getPhase().equals(Phase.BATTLE))\r\n            showError(\"you can’t do this action in this phase\");\r\n        else if (GameController.selectedCard.isAttacked())\r\n            showError(\"this card already attacked\");\r\n        else if (!GameController.isEnemyMonsterFieldEmpty())\r\n            showError(\"you can’t attack the opponent directly\");\r\n        else {\r\n            int damage = GameController.attackDirect();\r\n            if (damage != -1) showError(\"your opponent receives \" + damage + \" battle damage\");\r\n            MainMenu.playSound(\"src/main/resources/music/attack.wav\");\r\n        }\r\n\r\n    }\r\n\r\n    public void selectCard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            String opponent = \"\";\r\n            String cardPosition = matcher.group(1);\r\n            if (matcher.group(2) != null) opponent = matcher.group(2);\r\n            int number = Integer.parseInt(matcher.group(3));\r\n            int massage = GameController.selectCard(cardPosition, number, opponent);\r\n            if (massage == 1) System.out.println(\"card selected\");\r\n            else if (massage == 0) System.out.println(\"no card found in the given position\");\r\n            else System.out.println(\"invalid selection\");\r\n            if (massage == 1 && !opponent.equals(\"\")) GameController.setIsOpponentCardSelected(true);\r\n        }\r\n    }\r\n\r\n    public void deSelectCard(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            if (GameController.selectedCard == null) System.out.println(\"no card is selected yet\");\r\n            else {\r\n                System.out.println(\"card deselected\");\r\n                GameController.deSelectCard();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void cancel(Matcher matcher) {\r\n        if (!MainMenu.checked && matcher.matches()) {\r\n            MainMenu.checked = true;\r\n\r\n        }\r\n    }\r\n\r\n    private void surrender() {\r\n        Player.currentPlayer.setLifePoint(0);\r\n        System.out.println(1);\r\n        updateBoard(currentHand, enemyHand, currentMonster);\r\n    }\r\n\r\n    private void increaseMoney(Matcher matcher) {\r\n        if (matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            Player.currentPlayer.increaseMoney(Integer.parseInt(matcher.group(1)));\r\n        }\r\n    }\r\n\r\n    private void increaseLifePoint(Matcher matcher) {\r\n        if (matcher.matches()) {\r\n            MainMenu.checked = true;\r\n            Player.currentPlayer.increaseLifePoint(Integer.parseInt(matcher.group(1)));\r\n        }\r\n    }\r\n\r\n    private void winTheGame(Matcher matcher) {\r\n        if (matcher.matches()) {\r\n\r\n            if (matcher.group(1).equals(Player.currentPlayer.getNickname())) {\r\n                Player.opponent.setLifePoint(0);\r\n            } else if (matcher.group(1).equals(Player.opponent.getNickname())) {\r\n                Player.currentPlayer.setLifePoint(0);\r\n            } else Communicate.output(\"invalid name\");\r\n        }\r\n    }\r\n\r\n\r\n    public void showError(String error) {\r\n        massage.setText(error);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/View/GameMenu.java b/src/main/java/View/GameMenu.java
--- a/src/main/java/View/GameMenu.java	
+++ b/src/main/java/View/GameMenu.java	
@@ -164,7 +164,7 @@
                 background.setFill(null);
                 surrender.setImage(null);
                 surrender.toBack();
-                pause.toBack();
+
                 pauseText.setText(null);
                 isPaused = false;
             }
Index: .idea/libraries/lib.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\r\n  <library name=\"lib\">\r\n    <CLASSES>\r\n      <root url=\"file://$PROJECT_DIR$/../javafx-sdk-16/lib\" />\r\n    </CLASSES>\r\n    <JAVADOC />\r\n    <SOURCES>\r\n      <root url=\"file://$PROJECT_DIR$/../javafx-sdk-16/lib\" />\r\n    </SOURCES>\r\n    <jarDirectory url=\"file://$PROJECT_DIR$/../javafx-sdk-16/lib\" recursive=\"false\" />\r\n    <jarDirectory url=\"file://$PROJECT_DIR$/../javafx-sdk-16/lib\" recursive=\"false\" type=\"SOURCES\" />\r\n  </library>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/lib.xml b/.idea/libraries/lib.xml
--- a/.idea/libraries/lib.xml	
+++ b/.idea/libraries/lib.xml	
@@ -1,13 +1,13 @@
 <component name="libraryTable">
   <library name="lib">
     <CLASSES>
-      <root url="file://$PROJECT_DIR$/../javafx-sdk-16/lib" />
+      <root url="file://$USER_HOME$/Desktop/javafx-sdk-16/lib" />
     </CLASSES>
     <JAVADOC />
     <SOURCES>
-      <root url="file://$PROJECT_DIR$/../javafx-sdk-16/lib" />
+      <root url="file://$USER_HOME$/Desktop/javafx-sdk-16/lib" />
     </SOURCES>
-    <jarDirectory url="file://$PROJECT_DIR$/../javafx-sdk-16/lib" recursive="false" />
-    <jarDirectory url="file://$PROJECT_DIR$/../javafx-sdk-16/lib" recursive="false" type="SOURCES" />
+    <jarDirectory url="file://$USER_HOME$/Desktop/javafx-sdk-16/lib" recursive="false" />
+    <jarDirectory url="file://$USER_HOME$/Desktop/javafx-sdk-16/lib" recursive="false" type="SOURCES" />
   </library>
 </component>
\ No newline at end of file
Index: target/classes/View/deckMenu.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import java.net.*?>\r\n<?import javafx.scene.control.*?>\r\n<?import javafx.scene.image.*?>\r\n<?import javafx.scene.layout.*?>\r\n<?import javafx.scene.text.*?>\r\n\r\n<AnchorPane prefHeight=\"720\" prefWidth=\"1280\" xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"View.DeckMenu\">\r\n   <children>\r\n       <ImageView fitHeight=\"757.0\" fitWidth=\"1288.0\" layoutY=\"-4.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n           <image>\r\n               <Image url=\"@../PNG/Crypt-Best-Wallpaper-09152.jpg\" />\r\n           </image>\r\n       </ImageView>\r\n      <GridPane hgap=\"5\" vgap=\"5\" fx:id=\"deckGrid\" layoutX=\"243.0\" layoutY=\"80.0\" prefHeight=\"411.0\" prefWidth=\"817.0\">\r\n        <columnConstraints>\r\n          <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n          <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n        </columnConstraints>\r\n        <rowConstraints>\r\n          <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n          <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n            <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n          <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n        </rowConstraints>\r\n         <children>\r\n         </children>\r\n      </GridPane>\r\n       <ListView fx:id=\"deckListOfCards\" layoutX=\"1077.0\" layoutY=\"14.0\" prefHeight=\"700.0\" prefWidth=\"198.0\" styleClass=\"list-view\">\r\n\r\n       </ListView>\r\n      <ImageView fx:id=\"cardShow\" fitHeight=\"323.0\" fitWidth=\"187.0\" layoutX=\"13.0\" layoutY=\"103.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../PNG/Cards/Monsters/BabyDragon.jpg\" />\r\n         </image>\r\n      </ImageView>\r\n      <Text fx:id=\"cardDescription\" layoutX=\"14.0\" layoutY=\"305.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Text\" wrappingWidth=\"186.5016326904297\">\r\n         <font>\r\n            <Font name=\"Bell MT\" size=\"12.0\" />\r\n         </font>\r\n      </Text>\r\n      <Button layoutX=\"14.0\" layoutY=\"500\" mnemonicParsing=\"false\" onMouseClicked=\"#addToMainDeck\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"myButton\" text=\"Add to Main Deck\" />\r\n      <Button layoutX=\"14.0\" layoutY=\"540\" mnemonicParsing=\"false\" onMouseClicked=\"#addToSideDeck\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"myButton\" text=\"Add to Side Deck\" />\r\n      <Button layoutX=\"14.0\" layoutY=\"580\" mnemonicParsing=\"false\" onMouseClicked=\"#removeCardFromMainDeck\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"myButton\" text=\"Remove From Main Deck\" />\r\n       <Button layoutX=\"14.0\" layoutY=\"671.0\" mnemonicParsing=\"false\" onMouseClicked=\"#back\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"back\" text=\"Back\" />\r\n      <ListView fx:id=\"deckList\" layoutX=\"14.0\" layoutY=\"383.0\" prefHeight=\"97.0\" prefWidth=\"187.0\" />\r\n      <Button layoutX=\"243.0\" layoutY=\"14.0\" mnemonicParsing=\"false\" onMouseClicked=\"#createDeck\" prefHeight=\"38.0\" prefWidth=\"267.0\" styleClass=\"myButton\" text=\"Create New Deck\" />\r\n      <Button layoutX=\"14.0\" layoutY=\"622.0\" mnemonicParsing=\"false\" onMouseClicked=\"#removeCardFromSideDeck\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"myButton\" text=\"Remove From Side Deck\" />\r\n      <GridPane fx:id=\"sideDeckGrid\" layoutX=\"243.0\" layoutY=\"570.0\" prefHeight=\"88.0\" prefWidth=\"818.0\">\r\n        <columnConstraints>\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n            <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n          <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n          <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n        </columnConstraints>\r\n        <rowConstraints>\r\n          <RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />\r\n        </rowConstraints>\r\n      </GridPane>\r\n      <Button layoutX=\"526.0\" layoutY=\"14.0\" mnemonicParsing=\"false\" onMouseClicked=\"#activateDeck\" prefHeight=\"38.0\" prefWidth=\"267.0\" styleClass=\"myButton\" text=\"Activate This Deck\" />\r\n      <Button layoutX=\"809.0\" layoutY=\"14.0\" mnemonicParsing=\"false\" onMouseClicked=\"#deleteDeck\" prefHeight=\"38.0\" prefWidth=\"252.0\" styleClass=\"myButton\" text=\"Delete This Deck\" />\r\n      <Button layoutX=\"14.0\" layoutY=\"64.0\" mnemonicParsing=\"false\" onMouseClicked=\"#exportCard\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"myButton\" text=\"Export This Card\" />\r\n      <Button layoutX=\"13.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" onMouseClicked=\"#importCard\" prefHeight=\"26.0\" prefWidth=\"187.0\" styleClass=\"myButton\" text=\"Import Cards\" />\r\n   </children>\r\n    <stylesheets>\r\n        <URL value=\"@../css/deckMenu.css\" />\r\n    </stylesheets>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/View/deckMenu.fxml b/target/classes/View/deckMenu.fxml
--- a/target/classes/View/deckMenu.fxml	
+++ b/target/classes/View/deckMenu.fxml	
@@ -1,11 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import java.net.*?>
 <?import javafx.scene.control.*?>
-<?import javafx.scene.image.*?>
+<?import javafx.scene.image.Image?>
+<?import javafx.scene.image.ImageView?>
 <?import javafx.scene.layout.*?>
-<?import javafx.scene.text.*?>
-
+<?import javafx.scene.text.Font?>
+<?import javafx.scene.text.Text?>
+<?import java.net.URL?>
 <AnchorPane prefHeight="720" prefWidth="1280" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="View.DeckMenu">
    <children>
        <ImageView fitHeight="757.0" fitWidth="1288.0" layoutY="-4.0" pickOnBounds="true" preserveRatio="true">
